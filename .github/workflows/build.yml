name: Generate SDK Weekly

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 1" # This cron schedule runs the workflow every Monday at midnight

jobs:
  generate_sdk:
    name: Generate SDK
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get sha of current workflow file
        id: remote_action_sha
        run: |
          remote_sha="$GITHUB_WORKFLOW_SHA"
          echo "remote_sha=$remote_sha" >> $GITHUB_OUTPUT
          echo "$remote_sha"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get sha of last workflow file
        id: local_action_sha
        run: |
          LOCAL_FILE="data/build.workflow.sha"
          local_sha="empty"
          if test -f $LOCAL_FILE; then
          local_sha=$(cat $LOCAL_FILE)
            echo "local_sha=$local_sha" >> $GITHUB_OUTPUT
          else
            echo "SHA file does not exist, it will be created later."
          fi
          echo "$local_sha"

      - name: Compare workflow file
        run: |
          if [ "${{ steps.local_action_sha.outputs.remote_apisha }}" == "${{ steps.local_action_sha.outputs.local_apisha }}" ]; then
            echo "Local Graph metadata is the latest version"
            echo "WORKFLOW_UPDATED=0" >> $GITHUB_ENV
          else
            echo "Local workflow  is not the latest version"
            echo "WORKFLOW_UPDATED=1" >> $GITHUB_ENV
            mkdir -p data && cd data
            echo "${{ steps.local_action_sha.outputs.remote_apisha }}" >> openapi.sha
            cd ..
          fi

      - name: Get sha of remote Graph metadata
        id: remote_apisha
        run: |
          remote_apisha=$( gh api repos/microsoftgraph/msgraph-metadata/commits?path=/openapi/v1.0/openapi.yaml | \
          python3 -c "import sys, json; print(json.load(sys.stdin)[0]['sha'])")
          echo "remote_apisha=$remote_apisha" >> $GITHUB_OUTPUT
          echo "$remote_apisha"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get sha of local Graph metadata
        id: local_apisha
        run: |
          LOCAL_FILE="data/openapi.sha"
          local_apisha="empty"
          if test -f $LOCAL_FILE; then
            local_apisha=$(cat $LOCAL_FILE)
            echo "local_apisha=$local_apisha" >> $GITHUB_OUTPUT
          else
            echo "SHA file does not exist, it will be created later."
          fi
          echo "$local_apisha"

      - name: Compare Graph metadata
        run: |
          if [ "${{ steps.remote_apisha.outputs.remote_apisha }}" == "${{ steps.local_apisha.outputs.local_apisha }}" ]; then
            echo "Local Graph metadata is the latest version"
            echo "METADATA_UPDATED=0" >> $GITHUB_ENV
            else
            echo "Local Graph metadata is not the latest version"
            echo "METADATA_UPDATED=1" >> $GITHUB_ENV
            mkdir -p data && cd data
            curl --location --output openapi.yaml https://aka.ms/graph/v1.0/openapi.yaml
            echo "${{ steps.remote_apisha.outputs.remote_apisha }}" >> openapi.sha
            cd ..
          fi

      - name: Remote Kiota's version
        id: remote_kiota_ver
        run: |
          version_v=$( gh api repos/microsoft/kiota/releases/latest | \
          python3 -c "import sys, json; print(json.load(sys.stdin)['name'])") # v1.13.0
          remote_kiota_ver=${version_v#v} # 1.13.0
          echo "remote_kiota_ver=$remote_kiota_ver" >> $GITHUB_OUTPUT
          echo "$remote_kiota_ver"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Local Kiota's version
        id: local_kiota_ver
        run: |
          LOCAL_FILE="data/kiota.ver"
          local_kiota_ver="empty"
          if test -f $LOCAL_FILE; then
            local_kiota_ver=$(cat $LOCAL_FILE)
            echo "local_kiota_ver=$local_kiota_ver" >> $GITHUB_OUTPUT
          else
            echo "kiota.ver does not exist, it will be created later."
          fi
          echo "$local_kiota_ver"

      - name: Compare Kiota's version
        run: |
          if [ "${{ steps.remote_kiota_ver.outputs.remote_kiota_ver }}" == "${{ steps.local_kiota_ver.outputs.local_kiota_ver }}" ]; then
            echo "Local Kiota is the latest version"
            echo "KIOTA_UPDATED=0" >> $GITHUB_ENV
          else
            echo "Local Kiota is not the latest version"
            echo "KIOTA_UPDATED=1" >> $GITHUB_ENV
            mkdir -p data && cd data
            echo "${{ steps.remote_kiota_ver.outputs.remote_kiota_ver }}" >> kiota.ver
            cd ..
          fi

      # - name: Setup Node.js environment
      #   uses: actions/setup-node@v4.0.2
      #   with:
      #     node-version: "latest"

      # - name: Generate SDK
      #   run: bash generate_sdk.sh

      - name: Check before building
        run: |
          if [ "$WORKFLOW_UPDATED" = "1" ] || [ "$METADATA_UPDATED" = "1" ] || [ "$KIOTA_UPDATED" = "1"]; then
            echo "At least one updated."
            echo "NO_BUILDING=0" >> $GITHUB_ENV
          else
            echo "Everything is the same as before."
            echo "NO_BUILDING=1" >> $GITHUB_ENV
          fi

      - name: Setup Kiota
        id: setup_kiota
        run: |
          if [ "$NO_BUILDING" = "1" ]; then
            exit 0
          fi
          work_folder=$(pwd)
          cd $(mktemp -d)
          curl --location --output linux-x64.zip https://aka.ms/get/kiota/latest/linux-x64.zip
          unzip linux-x64.zip
          installed_path=$(pwd)
          echo "installed_path=$installed_path" >> $GITHUB_OUTPUT
          echo Kiota installed at $installed_path
          ls -lR
          cd $work_folder

      - name: Generate client with Kiota
        run: |
          if [ "$NO_BUILDING" = "1" ]; then
            exit 0
          fi
          rm -rf './src' & "${{ steps.setup_kiota.outputs.installed_path }}/kiota" generate --language TypeScript --output src --class-name GraphExcelClient --openapi data/openapi.yaml --include-path '/drives/**/work**'
          ls -lR src
          client_info="$(kiota info -d "data/openapi.yaml" -l TypeScript | tee /dev/tty)"
          install_packages="$(echo "$client_info" | python3 -c "import sys;print(' && '.join([line.strip().replace('npm install','yarn add').replace('-SE','--exact') for line in sys.stdin if line.strip().startswith('npm install')]))" | tee /dev/tty)"
          eval $install_packages

      - name: Local package version
        id: pervious_package_ver
        run: |
          if [ "$NO_BUILDING" = "1" ]; then
            exit 0
          fi
          str=$(npm pkg get version)
          ver=${str//\"/}
          echo "ver=$ver" >> $GITHUB_OUTPUT
          echo $ver

      - name: Set version
        id: next_ver
        run: |
          if [ "$NO_BUILDING" = "1" ]; then
            exit 0
          fi
          python3 -m pip install semantic-version
          ver = "$(python3 -c "import semantic_version; kiota_v = semantic_version.Version('${{ steps.remote_kiota_ver.outputs.remote_kiota_ver }}'); local_v = semantic_version.Version('${{ steps.pervious_package_ver.outputs.ver }}'); print(local_v.next_patch() if kiota_v.major==local_v.major and kiota_v.minor==local_v.minor else kiota_v)")"
          npm pkg set version=$ver
          echo "ver=$ver" >> $GITHUB_OUTPUT
          echo $ver

      - name: Build package
        run: |
          if [ "$NO_BUILDING" = "1" ]; then
            exit 0
          fi
          yarn build

      - name: Set identity
        run: |
          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email "$GITHUB_ACTOR_ID+$GITHUB_ACTOR@example.com"
          echo Commit as "$GITHUB_ACTOR <$GITHUB_ACTOR_ID+$GITHUB_ACTOR@example.com>"

      - name: Commit changes
        run: |
          git add .
          git commit -m "Automatic SDK generation"
          git push https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git HEAD:main
