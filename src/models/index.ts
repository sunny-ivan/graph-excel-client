/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createUntypedNodeFromDiscriminatorValue, type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter, UntypedNode } from '@microsoft/kiota-abstractions';

export interface BaseCollectionPaginationCountResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataCount property
     */
    odataCount?: number;
    /**
     * The OdataNextLink property
     */
    odataNextLink?: string;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BaseCollectionPaginationCountResponse}
 */
export function createBaseCollectionPaginationCountResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBaseCollectionPaginationCountResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Entity}
 */
export function createEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.workbook":
                    return deserializeIntoWorkbook;
                case "#microsoft.graph.workbookApplication":
                    return deserializeIntoWorkbookApplication;
                case "#microsoft.graph.workbookChart":
                    return deserializeIntoWorkbookChart;
                case "#microsoft.graph.workbookChartAreaFormat":
                    return deserializeIntoWorkbookChartAreaFormat;
                case "#microsoft.graph.workbookChartAxes":
                    return deserializeIntoWorkbookChartAxes;
                case "#microsoft.graph.workbookChartAxis":
                    return deserializeIntoWorkbookChartAxis;
                case "#microsoft.graph.workbookChartAxisFormat":
                    return deserializeIntoWorkbookChartAxisFormat;
                case "#microsoft.graph.workbookChartAxisTitle":
                    return deserializeIntoWorkbookChartAxisTitle;
                case "#microsoft.graph.workbookChartAxisTitleFormat":
                    return deserializeIntoWorkbookChartAxisTitleFormat;
                case "#microsoft.graph.workbookChartDataLabelFormat":
                    return deserializeIntoWorkbookChartDataLabelFormat;
                case "#microsoft.graph.workbookChartDataLabels":
                    return deserializeIntoWorkbookChartDataLabels;
                case "#microsoft.graph.workbookChartFill":
                    return deserializeIntoWorkbookChartFill;
                case "#microsoft.graph.workbookChartFont":
                    return deserializeIntoWorkbookChartFont;
                case "#microsoft.graph.workbookChartGridlines":
                    return deserializeIntoWorkbookChartGridlines;
                case "#microsoft.graph.workbookChartGridlinesFormat":
                    return deserializeIntoWorkbookChartGridlinesFormat;
                case "#microsoft.graph.workbookChartLegend":
                    return deserializeIntoWorkbookChartLegend;
                case "#microsoft.graph.workbookChartLegendFormat":
                    return deserializeIntoWorkbookChartLegendFormat;
                case "#microsoft.graph.workbookChartLineFormat":
                    return deserializeIntoWorkbookChartLineFormat;
                case "#microsoft.graph.workbookChartPoint":
                    return deserializeIntoWorkbookChartPoint;
                case "#microsoft.graph.workbookChartPointFormat":
                    return deserializeIntoWorkbookChartPointFormat;
                case "#microsoft.graph.workbookChartSeries":
                    return deserializeIntoWorkbookChartSeries;
                case "#microsoft.graph.workbookChartSeriesFormat":
                    return deserializeIntoWorkbookChartSeriesFormat;
                case "#microsoft.graph.workbookChartTitle":
                    return deserializeIntoWorkbookChartTitle;
                case "#microsoft.graph.workbookChartTitleFormat":
                    return deserializeIntoWorkbookChartTitleFormat;
                case "#microsoft.graph.workbookComment":
                    return deserializeIntoWorkbookComment;
                case "#microsoft.graph.workbookCommentReply":
                    return deserializeIntoWorkbookCommentReply;
                case "#microsoft.graph.workbookFilter":
                    return deserializeIntoWorkbookFilter;
                case "#microsoft.graph.workbookFormatProtection":
                    return deserializeIntoWorkbookFormatProtection;
                case "#microsoft.graph.workbookFunctionResult":
                    return deserializeIntoWorkbookFunctionResult;
                case "#microsoft.graph.workbookFunctions":
                    return deserializeIntoWorkbookFunctions;
                case "#microsoft.graph.workbookNamedItem":
                    return deserializeIntoWorkbookNamedItem;
                case "#microsoft.graph.workbookOperation":
                    return deserializeIntoWorkbookOperation;
                case "#microsoft.graph.workbookPivotTable":
                    return deserializeIntoWorkbookPivotTable;
                case "#microsoft.graph.workbookRange":
                    return deserializeIntoWorkbookRange;
                case "#microsoft.graph.workbookRangeBorder":
                    return deserializeIntoWorkbookRangeBorder;
                case "#microsoft.graph.workbookRangeFill":
                    return deserializeIntoWorkbookRangeFill;
                case "#microsoft.graph.workbookRangeFont":
                    return deserializeIntoWorkbookRangeFont;
                case "#microsoft.graph.workbookRangeFormat":
                    return deserializeIntoWorkbookRangeFormat;
                case "#microsoft.graph.workbookRangeSort":
                    return deserializeIntoWorkbookRangeSort;
                case "#microsoft.graph.workbookTable":
                    return deserializeIntoWorkbookTable;
                case "#microsoft.graph.workbookTableColumn":
                    return deserializeIntoWorkbookTableColumn;
                case "#microsoft.graph.workbookTableRow":
                    return deserializeIntoWorkbookTableRow;
                case "#microsoft.graph.workbookTableSort":
                    return deserializeIntoWorkbookTableSort;
                case "#microsoft.graph.workbookWorksheet":
                    return deserializeIntoWorkbookWorksheet;
                case "#microsoft.graph.workbookWorksheetProtection":
                    return deserializeIntoWorkbookWorksheetProtection;
            }
        }
    }
    return deserializeIntoEntity;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookApplication}
 */
export function createWorkbookApplicationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookApplication;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartAreaFormat}
 */
export function createWorkbookChartAreaFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartAreaFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartAxes}
 */
export function createWorkbookChartAxesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartAxes;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartAxisFormat}
 */
export function createWorkbookChartAxisFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartAxisFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartAxis}
 */
export function createWorkbookChartAxisFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartAxis;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartAxisTitleFormat}
 */
export function createWorkbookChartAxisTitleFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartAxisTitleFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartAxisTitle}
 */
export function createWorkbookChartAxisTitleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartAxisTitle;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartCollectionResponse}
 */
export function createWorkbookChartCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartDataLabelFormat}
 */
export function createWorkbookChartDataLabelFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartDataLabelFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartDataLabels}
 */
export function createWorkbookChartDataLabelsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartDataLabels;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartFill}
 */
export function createWorkbookChartFillFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartFill;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartFont}
 */
export function createWorkbookChartFontFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartFont;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChart}
 */
export function createWorkbookChartFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChart;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartGridlinesFormat}
 */
export function createWorkbookChartGridlinesFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartGridlinesFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartGridlines}
 */
export function createWorkbookChartGridlinesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartGridlines;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartLegendFormat}
 */
export function createWorkbookChartLegendFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartLegendFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartLegend}
 */
export function createWorkbookChartLegendFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartLegend;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartLineFormat}
 */
export function createWorkbookChartLineFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartLineFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartPointCollectionResponse}
 */
export function createWorkbookChartPointCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartPointCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartPointFormat}
 */
export function createWorkbookChartPointFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartPointFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartPoint}
 */
export function createWorkbookChartPointFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartPoint;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartSeriesCollectionResponse}
 */
export function createWorkbookChartSeriesCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartSeriesCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartSeriesFormat}
 */
export function createWorkbookChartSeriesFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartSeriesFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartSeries}
 */
export function createWorkbookChartSeriesFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartSeries;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartTitleFormat}
 */
export function createWorkbookChartTitleFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartTitleFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookChartTitle}
 */
export function createWorkbookChartTitleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookChartTitle;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookCommentCollectionResponse}
 */
export function createWorkbookCommentCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookCommentCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookComment}
 */
export function createWorkbookCommentFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookComment;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookCommentReplyCollectionResponse}
 */
export function createWorkbookCommentReplyCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookCommentReplyCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookCommentReply}
 */
export function createWorkbookCommentReplyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookCommentReply;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookFilterCriteria}
 */
export function createWorkbookFilterCriteriaFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookFilterCriteria;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookFilter}
 */
export function createWorkbookFilterFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookFilter;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookFormatProtection}
 */
export function createWorkbookFormatProtectionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookFormatProtection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Workbook}
 */
export function createWorkbookFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbook;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookFunctionResult}
 */
export function createWorkbookFunctionResultFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookFunctionResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookFunctions}
 */
export function createWorkbookFunctionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookFunctions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookIcon}
 */
export function createWorkbookIconFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookIcon;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookNamedItemCollectionResponse}
 */
export function createWorkbookNamedItemCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookNamedItemCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookNamedItem}
 */
export function createWorkbookNamedItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookNamedItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookOperationCollectionResponse}
 */
export function createWorkbookOperationCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookOperationCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookOperationError}
 */
export function createWorkbookOperationErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookOperationError;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookOperation}
 */
export function createWorkbookOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookPivotTableCollectionResponse}
 */
export function createWorkbookPivotTableCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookPivotTableCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookPivotTable}
 */
export function createWorkbookPivotTableFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookPivotTable;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookRangeBorder}
 */
export function createWorkbookRangeBorderFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookRangeBorder;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookRangeFill}
 */
export function createWorkbookRangeFillFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookRangeFill;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookRangeFont}
 */
export function createWorkbookRangeFontFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookRangeFont;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookRangeFormat}
 */
export function createWorkbookRangeFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookRangeFormat;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookRange}
 */
export function createWorkbookRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookRange;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookRangeSort}
 */
export function createWorkbookRangeSortFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookRangeSort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookSessionInfo}
 */
export function createWorkbookSessionInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookSessionInfo;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookSortField}
 */
export function createWorkbookSortFieldFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookSortField;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookTableCollectionResponse}
 */
export function createWorkbookTableCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookTableCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookTableColumnCollectionResponse}
 */
export function createWorkbookTableColumnCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookTableColumnCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookTableColumn}
 */
export function createWorkbookTableColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookTableColumn;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookTable}
 */
export function createWorkbookTableFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookTable;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookTableRowCollectionResponse}
 */
export function createWorkbookTableRowCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookTableRowCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookTableRow}
 */
export function createWorkbookTableRowFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookTableRow;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookTableSort}
 */
export function createWorkbookTableSortFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookTableSort;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookWorksheetCollectionResponse}
 */
export function createWorkbookWorksheetCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookWorksheetCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookWorksheet}
 */
export function createWorkbookWorksheetFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookWorksheet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookWorksheetProtection}
 */
export function createWorkbookWorksheetProtectionFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookWorksheetProtection;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {WorkbookWorksheetProtectionOptions}
 */
export function createWorkbookWorksheetProtectionOptionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoWorkbookWorksheetProtectionOptions;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoBaseCollectionPaginationCountResponse(baseCollectionPaginationCountResponse: Partial<BaseCollectionPaginationCountResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.count": n => { baseCollectionPaginationCountResponse.odataCount = n.getNumberValue(); },
        "@odata.nextLink": n => { baseCollectionPaginationCountResponse.odataNextLink = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoEntity(entity: Partial<Entity> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { entity.id = n.getStringValue(); },
        "@odata.type": n => { entity.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbook(workbook: Partial<Workbook> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbook),
        "application": n => { workbook.application = n.getObjectValue<WorkbookApplication>(createWorkbookApplicationFromDiscriminatorValue); },
        "comments": n => { workbook.comments = n.getCollectionOfObjectValues<WorkbookComment>(createWorkbookCommentFromDiscriminatorValue); },
        "functions": n => { workbook.functions = n.getObjectValue<WorkbookFunctions>(createWorkbookFunctionsFromDiscriminatorValue); },
        "names": n => { workbook.names = n.getCollectionOfObjectValues<WorkbookNamedItem>(createWorkbookNamedItemFromDiscriminatorValue); },
        "operations": n => { workbook.operations = n.getCollectionOfObjectValues<WorkbookOperation>(createWorkbookOperationFromDiscriminatorValue); },
        "tables": n => { workbook.tables = n.getCollectionOfObjectValues<WorkbookTable>(createWorkbookTableFromDiscriminatorValue); },
        "worksheets": n => { workbook.worksheets = n.getCollectionOfObjectValues<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookApplication(workbookApplication: Partial<WorkbookApplication> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookApplication),
        "calculationMode": n => { workbookApplication.calculationMode = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChart(workbookChart: Partial<WorkbookChart> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChart),
        "axes": n => { workbookChart.axes = n.getObjectValue<WorkbookChartAxes>(createWorkbookChartAxesFromDiscriminatorValue); },
        "dataLabels": n => { workbookChart.dataLabels = n.getObjectValue<WorkbookChartDataLabels>(createWorkbookChartDataLabelsFromDiscriminatorValue); },
        "format": n => { workbookChart.format = n.getObjectValue<WorkbookChartAreaFormat>(createWorkbookChartAreaFormatFromDiscriminatorValue); },
        "height": n => { workbookChart.height = n.getNumberValue(); },
        "left": n => { workbookChart.left = n.getNumberValue(); },
        "legend": n => { workbookChart.legend = n.getObjectValue<WorkbookChartLegend>(createWorkbookChartLegendFromDiscriminatorValue); },
        "name": n => { workbookChart.name = n.getStringValue(); },
        "series": n => { workbookChart.series = n.getCollectionOfObjectValues<WorkbookChartSeries>(createWorkbookChartSeriesFromDiscriminatorValue); },
        "title": n => { workbookChart.title = n.getObjectValue<WorkbookChartTitle>(createWorkbookChartTitleFromDiscriminatorValue); },
        "top": n => { workbookChart.top = n.getNumberValue(); },
        "width": n => { workbookChart.width = n.getNumberValue(); },
        "worksheet": n => { workbookChart.worksheet = n.getObjectValue<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartAreaFormat(workbookChartAreaFormat: Partial<WorkbookChartAreaFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartAreaFormat),
        "fill": n => { workbookChartAreaFormat.fill = n.getObjectValue<WorkbookChartFill>(createWorkbookChartFillFromDiscriminatorValue); },
        "font": n => { workbookChartAreaFormat.font = n.getObjectValue<WorkbookChartFont>(createWorkbookChartFontFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartAxes(workbookChartAxes: Partial<WorkbookChartAxes> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartAxes),
        "categoryAxis": n => { workbookChartAxes.categoryAxis = n.getObjectValue<WorkbookChartAxis>(createWorkbookChartAxisFromDiscriminatorValue); },
        "seriesAxis": n => { workbookChartAxes.seriesAxis = n.getObjectValue<WorkbookChartAxis>(createWorkbookChartAxisFromDiscriminatorValue); },
        "valueAxis": n => { workbookChartAxes.valueAxis = n.getObjectValue<WorkbookChartAxis>(createWorkbookChartAxisFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartAxis(workbookChartAxis: Partial<WorkbookChartAxis> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartAxis),
        "format": n => { workbookChartAxis.format = n.getObjectValue<WorkbookChartAxisFormat>(createWorkbookChartAxisFormatFromDiscriminatorValue); },
        "majorGridlines": n => { workbookChartAxis.majorGridlines = n.getObjectValue<WorkbookChartGridlines>(createWorkbookChartGridlinesFromDiscriminatorValue); },
        "majorUnit": n => { workbookChartAxis.majorUnit = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "maximum": n => { workbookChartAxis.maximum = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "minimum": n => { workbookChartAxis.minimum = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "minorGridlines": n => { workbookChartAxis.minorGridlines = n.getObjectValue<WorkbookChartGridlines>(createWorkbookChartGridlinesFromDiscriminatorValue); },
        "minorUnit": n => { workbookChartAxis.minorUnit = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "title": n => { workbookChartAxis.title = n.getObjectValue<WorkbookChartAxisTitle>(createWorkbookChartAxisTitleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartAxisFormat(workbookChartAxisFormat: Partial<WorkbookChartAxisFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartAxisFormat),
        "font": n => { workbookChartAxisFormat.font = n.getObjectValue<WorkbookChartFont>(createWorkbookChartFontFromDiscriminatorValue); },
        "line": n => { workbookChartAxisFormat.line = n.getObjectValue<WorkbookChartLineFormat>(createWorkbookChartLineFormatFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartAxisTitle(workbookChartAxisTitle: Partial<WorkbookChartAxisTitle> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartAxisTitle),
        "format": n => { workbookChartAxisTitle.format = n.getObjectValue<WorkbookChartAxisTitleFormat>(createWorkbookChartAxisTitleFormatFromDiscriminatorValue); },
        "text": n => { workbookChartAxisTitle.text = n.getStringValue(); },
        "visible": n => { workbookChartAxisTitle.visible = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartAxisTitleFormat(workbookChartAxisTitleFormat: Partial<WorkbookChartAxisTitleFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartAxisTitleFormat),
        "font": n => { workbookChartAxisTitleFormat.font = n.getObjectValue<WorkbookChartFont>(createWorkbookChartFontFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartCollectionResponse(workbookChartCollectionResponse: Partial<WorkbookChartCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookChartCollectionResponse),
        "value": n => { workbookChartCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookChart>(createWorkbookChartFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartDataLabelFormat(workbookChartDataLabelFormat: Partial<WorkbookChartDataLabelFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartDataLabelFormat),
        "fill": n => { workbookChartDataLabelFormat.fill = n.getObjectValue<WorkbookChartFill>(createWorkbookChartFillFromDiscriminatorValue); },
        "font": n => { workbookChartDataLabelFormat.font = n.getObjectValue<WorkbookChartFont>(createWorkbookChartFontFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartDataLabels(workbookChartDataLabels: Partial<WorkbookChartDataLabels> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartDataLabels),
        "format": n => { workbookChartDataLabels.format = n.getObjectValue<WorkbookChartDataLabelFormat>(createWorkbookChartDataLabelFormatFromDiscriminatorValue); },
        "position": n => { workbookChartDataLabels.position = n.getStringValue(); },
        "separator": n => { workbookChartDataLabels.separator = n.getStringValue(); },
        "showBubbleSize": n => { workbookChartDataLabels.showBubbleSize = n.getBooleanValue(); },
        "showCategoryName": n => { workbookChartDataLabels.showCategoryName = n.getBooleanValue(); },
        "showLegendKey": n => { workbookChartDataLabels.showLegendKey = n.getBooleanValue(); },
        "showPercentage": n => { workbookChartDataLabels.showPercentage = n.getBooleanValue(); },
        "showSeriesName": n => { workbookChartDataLabels.showSeriesName = n.getBooleanValue(); },
        "showValue": n => { workbookChartDataLabels.showValue = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartFill(workbookChartFill: Partial<WorkbookChartFill> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartFill),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartFont(workbookChartFont: Partial<WorkbookChartFont> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartFont),
        "bold": n => { workbookChartFont.bold = n.getBooleanValue(); },
        "color": n => { workbookChartFont.color = n.getStringValue(); },
        "italic": n => { workbookChartFont.italic = n.getBooleanValue(); },
        "name": n => { workbookChartFont.name = n.getStringValue(); },
        "size": n => { workbookChartFont.size = n.getNumberValue(); },
        "underline": n => { workbookChartFont.underline = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartGridlines(workbookChartGridlines: Partial<WorkbookChartGridlines> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartGridlines),
        "format": n => { workbookChartGridlines.format = n.getObjectValue<WorkbookChartGridlinesFormat>(createWorkbookChartGridlinesFormatFromDiscriminatorValue); },
        "visible": n => { workbookChartGridlines.visible = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartGridlinesFormat(workbookChartGridlinesFormat: Partial<WorkbookChartGridlinesFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartGridlinesFormat),
        "line": n => { workbookChartGridlinesFormat.line = n.getObjectValue<WorkbookChartLineFormat>(createWorkbookChartLineFormatFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartLegend(workbookChartLegend: Partial<WorkbookChartLegend> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartLegend),
        "format": n => { workbookChartLegend.format = n.getObjectValue<WorkbookChartLegendFormat>(createWorkbookChartLegendFormatFromDiscriminatorValue); },
        "overlay": n => { workbookChartLegend.overlay = n.getBooleanValue(); },
        "position": n => { workbookChartLegend.position = n.getStringValue(); },
        "visible": n => { workbookChartLegend.visible = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartLegendFormat(workbookChartLegendFormat: Partial<WorkbookChartLegendFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartLegendFormat),
        "fill": n => { workbookChartLegendFormat.fill = n.getObjectValue<WorkbookChartFill>(createWorkbookChartFillFromDiscriminatorValue); },
        "font": n => { workbookChartLegendFormat.font = n.getObjectValue<WorkbookChartFont>(createWorkbookChartFontFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartLineFormat(workbookChartLineFormat: Partial<WorkbookChartLineFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartLineFormat),
        "color": n => { workbookChartLineFormat.color = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartPoint(workbookChartPoint: Partial<WorkbookChartPoint> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartPoint),
        "format": n => { workbookChartPoint.format = n.getObjectValue<WorkbookChartPointFormat>(createWorkbookChartPointFormatFromDiscriminatorValue); },
        "value": n => { workbookChartPoint.value = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartPointCollectionResponse(workbookChartPointCollectionResponse: Partial<WorkbookChartPointCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookChartPointCollectionResponse),
        "value": n => { workbookChartPointCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookChartPoint>(createWorkbookChartPointFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartPointFormat(workbookChartPointFormat: Partial<WorkbookChartPointFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartPointFormat),
        "fill": n => { workbookChartPointFormat.fill = n.getObjectValue<WorkbookChartFill>(createWorkbookChartFillFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartSeries(workbookChartSeries: Partial<WorkbookChartSeries> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartSeries),
        "format": n => { workbookChartSeries.format = n.getObjectValue<WorkbookChartSeriesFormat>(createWorkbookChartSeriesFormatFromDiscriminatorValue); },
        "name": n => { workbookChartSeries.name = n.getStringValue(); },
        "points": n => { workbookChartSeries.points = n.getCollectionOfObjectValues<WorkbookChartPoint>(createWorkbookChartPointFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartSeriesCollectionResponse(workbookChartSeriesCollectionResponse: Partial<WorkbookChartSeriesCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookChartSeriesCollectionResponse),
        "value": n => { workbookChartSeriesCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookChartSeries>(createWorkbookChartSeriesFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartSeriesFormat(workbookChartSeriesFormat: Partial<WorkbookChartSeriesFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartSeriesFormat),
        "fill": n => { workbookChartSeriesFormat.fill = n.getObjectValue<WorkbookChartFill>(createWorkbookChartFillFromDiscriminatorValue); },
        "line": n => { workbookChartSeriesFormat.line = n.getObjectValue<WorkbookChartLineFormat>(createWorkbookChartLineFormatFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartTitle(workbookChartTitle: Partial<WorkbookChartTitle> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartTitle),
        "format": n => { workbookChartTitle.format = n.getObjectValue<WorkbookChartTitleFormat>(createWorkbookChartTitleFormatFromDiscriminatorValue); },
        "overlay": n => { workbookChartTitle.overlay = n.getBooleanValue(); },
        "text": n => { workbookChartTitle.text = n.getStringValue(); },
        "visible": n => { workbookChartTitle.visible = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookChartTitleFormat(workbookChartTitleFormat: Partial<WorkbookChartTitleFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartTitleFormat),
        "fill": n => { workbookChartTitleFormat.fill = n.getObjectValue<WorkbookChartFill>(createWorkbookChartFillFromDiscriminatorValue); },
        "font": n => { workbookChartTitleFormat.font = n.getObjectValue<WorkbookChartFont>(createWorkbookChartFontFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookComment(workbookComment: Partial<WorkbookComment> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookComment),
        "content": n => { workbookComment.content = n.getStringValue(); },
        "contentType": n => { workbookComment.contentType = n.getStringValue(); },
        "replies": n => { workbookComment.replies = n.getCollectionOfObjectValues<WorkbookCommentReply>(createWorkbookCommentReplyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookCommentCollectionResponse(workbookCommentCollectionResponse: Partial<WorkbookCommentCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookCommentCollectionResponse),
        "value": n => { workbookCommentCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookComment>(createWorkbookCommentFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookCommentReply(workbookCommentReply: Partial<WorkbookCommentReply> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookCommentReply),
        "content": n => { workbookCommentReply.content = n.getStringValue(); },
        "contentType": n => { workbookCommentReply.contentType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookCommentReplyCollectionResponse(workbookCommentReplyCollectionResponse: Partial<WorkbookCommentReplyCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookCommentReplyCollectionResponse),
        "value": n => { workbookCommentReplyCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookCommentReply>(createWorkbookCommentReplyFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookFilter(workbookFilter: Partial<WorkbookFilter> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookFilter),
        "criteria": n => { workbookFilter.criteria = n.getObjectValue<WorkbookFilterCriteria>(createWorkbookFilterCriteriaFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookFilterCriteria(workbookFilterCriteria: Partial<WorkbookFilterCriteria> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "color": n => { workbookFilterCriteria.color = n.getStringValue(); },
        "criterion1": n => { workbookFilterCriteria.criterion1 = n.getStringValue(); },
        "criterion2": n => { workbookFilterCriteria.criterion2 = n.getStringValue(); },
        "dynamicCriteria": n => { workbookFilterCriteria.dynamicCriteria = n.getStringValue(); },
        "filterOn": n => { workbookFilterCriteria.filterOn = n.getStringValue(); },
        "icon": n => { workbookFilterCriteria.icon = n.getObjectValue<WorkbookIcon>(createWorkbookIconFromDiscriminatorValue); },
        "@odata.type": n => { workbookFilterCriteria.odataType = n.getStringValue(); },
        "operator": n => { workbookFilterCriteria.operator = n.getStringValue(); },
        "values": n => { workbookFilterCriteria.values = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookFormatProtection(workbookFormatProtection: Partial<WorkbookFormatProtection> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookFormatProtection),
        "formulaHidden": n => { workbookFormatProtection.formulaHidden = n.getBooleanValue(); },
        "locked": n => { workbookFormatProtection.locked = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookFunctionResult(workbookFunctionResult: Partial<WorkbookFunctionResult> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookFunctionResult),
        "error": n => { workbookFunctionResult.errorEscaped = n.getStringValue(); },
        "value": n => { workbookFunctionResult.value = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookFunctions(workbookFunctions: Partial<WorkbookFunctions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookFunctions),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookIcon(workbookIcon: Partial<WorkbookIcon> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "index": n => { workbookIcon.index = n.getNumberValue(); },
        "@odata.type": n => { workbookIcon.odataType = n.getStringValue(); },
        "set": n => { workbookIcon.set = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookNamedItem(workbookNamedItem: Partial<WorkbookNamedItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookNamedItem),
        "comment": n => { workbookNamedItem.comment = n.getStringValue(); },
        "name": n => { workbookNamedItem.name = n.getStringValue(); },
        "scope": n => { workbookNamedItem.scope = n.getStringValue(); },
        "type": n => { workbookNamedItem.type = n.getStringValue(); },
        "value": n => { workbookNamedItem.value = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "visible": n => { workbookNamedItem.visible = n.getBooleanValue(); },
        "worksheet": n => { workbookNamedItem.worksheet = n.getObjectValue<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookNamedItemCollectionResponse(workbookNamedItemCollectionResponse: Partial<WorkbookNamedItemCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookNamedItemCollectionResponse),
        "value": n => { workbookNamedItemCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookNamedItem>(createWorkbookNamedItemFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookOperation(workbookOperation: Partial<WorkbookOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookOperation),
        "error": n => { workbookOperation.errorEscaped = n.getObjectValue<WorkbookOperationError>(createWorkbookOperationErrorFromDiscriminatorValue); },
        "resourceLocation": n => { workbookOperation.resourceLocation = n.getStringValue(); },
        "status": n => { workbookOperation.status = n.getEnumValue<WorkbookOperationStatus>(WorkbookOperationStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookOperationCollectionResponse(workbookOperationCollectionResponse: Partial<WorkbookOperationCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookOperationCollectionResponse),
        "value": n => { workbookOperationCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookOperation>(createWorkbookOperationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookOperationError(workbookOperationError: Partial<WorkbookOperationError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { workbookOperationError.code = n.getStringValue(); },
        "innerError": n => { workbookOperationError.innerError = n.getObjectValue<WorkbookOperationError>(createWorkbookOperationErrorFromDiscriminatorValue); },
        "message": n => { workbookOperationError.message = n.getStringValue(); },
        "@odata.type": n => { workbookOperationError.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookPivotTable(workbookPivotTable: Partial<WorkbookPivotTable> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookPivotTable),
        "name": n => { workbookPivotTable.name = n.getStringValue(); },
        "worksheet": n => { workbookPivotTable.worksheet = n.getObjectValue<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookPivotTableCollectionResponse(workbookPivotTableCollectionResponse: Partial<WorkbookPivotTableCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookPivotTableCollectionResponse),
        "value": n => { workbookPivotTableCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookPivotTable>(createWorkbookPivotTableFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookRange(workbookRange: Partial<WorkbookRange> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRange),
        "address": n => { workbookRange.address = n.getStringValue(); },
        "addressLocal": n => { workbookRange.addressLocal = n.getStringValue(); },
        "cellCount": n => { workbookRange.cellCount = n.getNumberValue(); },
        "columnCount": n => { workbookRange.columnCount = n.getNumberValue(); },
        "columnHidden": n => { workbookRange.columnHidden = n.getBooleanValue(); },
        "columnIndex": n => { workbookRange.columnIndex = n.getNumberValue(); },
        "format": n => { workbookRange.format = n.getObjectValue<WorkbookRangeFormat>(createWorkbookRangeFormatFromDiscriminatorValue); },
        "formulas": n => { workbookRange.formulas = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "formulasLocal": n => { workbookRange.formulasLocal = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "formulasR1C1": n => { workbookRange.formulasR1C1 = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "hidden": n => { workbookRange.hidden = n.getBooleanValue(); },
        "numberFormat": n => { workbookRange.numberFormat = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "rowCount": n => { workbookRange.rowCount = n.getNumberValue(); },
        "rowHidden": n => { workbookRange.rowHidden = n.getBooleanValue(); },
        "rowIndex": n => { workbookRange.rowIndex = n.getNumberValue(); },
        "sort": n => { workbookRange.sort = n.getObjectValue<WorkbookRangeSort>(createWorkbookRangeSortFromDiscriminatorValue); },
        "text": n => { workbookRange.text = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "values": n => { workbookRange.values = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "valueTypes": n => { workbookRange.valueTypes = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "worksheet": n => { workbookRange.worksheet = n.getObjectValue<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookRangeBorder(workbookRangeBorder: Partial<WorkbookRangeBorder> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRangeBorder),
        "color": n => { workbookRangeBorder.color = n.getStringValue(); },
        "sideIndex": n => { workbookRangeBorder.sideIndex = n.getStringValue(); },
        "style": n => { workbookRangeBorder.style = n.getStringValue(); },
        "weight": n => { workbookRangeBorder.weight = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookRangeFill(workbookRangeFill: Partial<WorkbookRangeFill> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRangeFill),
        "color": n => { workbookRangeFill.color = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookRangeFont(workbookRangeFont: Partial<WorkbookRangeFont> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRangeFont),
        "bold": n => { workbookRangeFont.bold = n.getBooleanValue(); },
        "color": n => { workbookRangeFont.color = n.getStringValue(); },
        "italic": n => { workbookRangeFont.italic = n.getBooleanValue(); },
        "name": n => { workbookRangeFont.name = n.getStringValue(); },
        "size": n => { workbookRangeFont.size = n.getNumberValue(); },
        "underline": n => { workbookRangeFont.underline = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookRangeFormat(workbookRangeFormat: Partial<WorkbookRangeFormat> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRangeFormat),
        "borders": n => { workbookRangeFormat.borders = n.getCollectionOfObjectValues<WorkbookRangeBorder>(createWorkbookRangeBorderFromDiscriminatorValue); },
        "columnWidth": n => { workbookRangeFormat.columnWidth = n.getNumberValue(); },
        "fill": n => { workbookRangeFormat.fill = n.getObjectValue<WorkbookRangeFill>(createWorkbookRangeFillFromDiscriminatorValue); },
        "font": n => { workbookRangeFormat.font = n.getObjectValue<WorkbookRangeFont>(createWorkbookRangeFontFromDiscriminatorValue); },
        "horizontalAlignment": n => { workbookRangeFormat.horizontalAlignment = n.getStringValue(); },
        "protection": n => { workbookRangeFormat.protection = n.getObjectValue<WorkbookFormatProtection>(createWorkbookFormatProtectionFromDiscriminatorValue); },
        "rowHeight": n => { workbookRangeFormat.rowHeight = n.getNumberValue(); },
        "verticalAlignment": n => { workbookRangeFormat.verticalAlignment = n.getStringValue(); },
        "wrapText": n => { workbookRangeFormat.wrapText = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookRangeSort(workbookRangeSort: Partial<WorkbookRangeSort> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRangeSort),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookSessionInfo(workbookSessionInfo: Partial<WorkbookSessionInfo> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { workbookSessionInfo.id = n.getStringValue(); },
        "@odata.type": n => { workbookSessionInfo.odataType = n.getStringValue(); },
        "persistChanges": n => { workbookSessionInfo.persistChanges = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookSortField(workbookSortField: Partial<WorkbookSortField> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ascending": n => { workbookSortField.ascending = n.getBooleanValue(); },
        "color": n => { workbookSortField.color = n.getStringValue(); },
        "dataOption": n => { workbookSortField.dataOption = n.getStringValue(); },
        "icon": n => { workbookSortField.icon = n.getObjectValue<WorkbookIcon>(createWorkbookIconFromDiscriminatorValue); },
        "key": n => { workbookSortField.key = n.getNumberValue(); },
        "@odata.type": n => { workbookSortField.odataType = n.getStringValue(); },
        "sortOn": n => { workbookSortField.sortOn = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookTable(workbookTable: Partial<WorkbookTable> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookTable),
        "columns": n => { workbookTable.columns = n.getCollectionOfObjectValues<WorkbookTableColumn>(createWorkbookTableColumnFromDiscriminatorValue); },
        "highlightFirstColumn": n => { workbookTable.highlightFirstColumn = n.getBooleanValue(); },
        "highlightLastColumn": n => { workbookTable.highlightLastColumn = n.getBooleanValue(); },
        "legacyId": n => { workbookTable.legacyId = n.getStringValue(); },
        "name": n => { workbookTable.name = n.getStringValue(); },
        "rows": n => { workbookTable.rows = n.getCollectionOfObjectValues<WorkbookTableRow>(createWorkbookTableRowFromDiscriminatorValue); },
        "showBandedColumns": n => { workbookTable.showBandedColumns = n.getBooleanValue(); },
        "showBandedRows": n => { workbookTable.showBandedRows = n.getBooleanValue(); },
        "showFilterButton": n => { workbookTable.showFilterButton = n.getBooleanValue(); },
        "showHeaders": n => { workbookTable.showHeaders = n.getBooleanValue(); },
        "showTotals": n => { workbookTable.showTotals = n.getBooleanValue(); },
        "sort": n => { workbookTable.sort = n.getObjectValue<WorkbookTableSort>(createWorkbookTableSortFromDiscriminatorValue); },
        "style": n => { workbookTable.style = n.getStringValue(); },
        "worksheet": n => { workbookTable.worksheet = n.getObjectValue<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookTableCollectionResponse(workbookTableCollectionResponse: Partial<WorkbookTableCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookTableCollectionResponse),
        "value": n => { workbookTableCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookTable>(createWorkbookTableFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookTableColumn(workbookTableColumn: Partial<WorkbookTableColumn> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookTableColumn),
        "filter": n => { workbookTableColumn.filter = n.getObjectValue<WorkbookFilter>(createWorkbookFilterFromDiscriminatorValue); },
        "index": n => { workbookTableColumn.index = n.getNumberValue(); },
        "name": n => { workbookTableColumn.name = n.getStringValue(); },
        "values": n => { workbookTableColumn.values = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookTableColumnCollectionResponse(workbookTableColumnCollectionResponse: Partial<WorkbookTableColumnCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookTableColumnCollectionResponse),
        "value": n => { workbookTableColumnCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookTableColumn>(createWorkbookTableColumnFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookTableRow(workbookTableRow: Partial<WorkbookTableRow> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookTableRow),
        "index": n => { workbookTableRow.index = n.getNumberValue(); },
        "values": n => { workbookTableRow.values = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookTableRowCollectionResponse(workbookTableRowCollectionResponse: Partial<WorkbookTableRowCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookTableRowCollectionResponse),
        "value": n => { workbookTableRowCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookTableRow>(createWorkbookTableRowFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookTableSort(workbookTableSort: Partial<WorkbookTableSort> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookTableSort),
        "fields": n => { workbookTableSort.fields = n.getCollectionOfObjectValues<WorkbookSortField>(createWorkbookSortFieldFromDiscriminatorValue); },
        "matchCase": n => { workbookTableSort.matchCase = n.getBooleanValue(); },
        "method": n => { workbookTableSort.method = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookWorksheet(workbookWorksheet: Partial<WorkbookWorksheet> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookWorksheet),
        "charts": n => { workbookWorksheet.charts = n.getCollectionOfObjectValues<WorkbookChart>(createWorkbookChartFromDiscriminatorValue); },
        "name": n => { workbookWorksheet.name = n.getStringValue(); },
        "names": n => { workbookWorksheet.names = n.getCollectionOfObjectValues<WorkbookNamedItem>(createWorkbookNamedItemFromDiscriminatorValue); },
        "pivotTables": n => { workbookWorksheet.pivotTables = n.getCollectionOfObjectValues<WorkbookPivotTable>(createWorkbookPivotTableFromDiscriminatorValue); },
        "position": n => { workbookWorksheet.position = n.getNumberValue(); },
        "protection": n => { workbookWorksheet.protection = n.getObjectValue<WorkbookWorksheetProtection>(createWorkbookWorksheetProtectionFromDiscriminatorValue); },
        "tables": n => { workbookWorksheet.tables = n.getCollectionOfObjectValues<WorkbookTable>(createWorkbookTableFromDiscriminatorValue); },
        "visibility": n => { workbookWorksheet.visibility = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookWorksheetCollectionResponse(workbookWorksheetCollectionResponse: Partial<WorkbookWorksheetCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workbookWorksheetCollectionResponse),
        "value": n => { workbookWorksheetCollectionResponse.value = n.getCollectionOfObjectValues<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookWorksheetProtection(workbookWorksheetProtection: Partial<WorkbookWorksheetProtection> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookWorksheetProtection),
        "options": n => { workbookWorksheetProtection.options = n.getObjectValue<WorkbookWorksheetProtectionOptions>(createWorkbookWorksheetProtectionOptionsFromDiscriminatorValue); },
        "protected": n => { workbookWorksheetProtection.protected = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoWorkbookWorksheetProtectionOptions(workbookWorksheetProtectionOptions: Partial<WorkbookWorksheetProtectionOptions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allowAutoFilter": n => { workbookWorksheetProtectionOptions.allowAutoFilter = n.getBooleanValue(); },
        "allowDeleteColumns": n => { workbookWorksheetProtectionOptions.allowDeleteColumns = n.getBooleanValue(); },
        "allowDeleteRows": n => { workbookWorksheetProtectionOptions.allowDeleteRows = n.getBooleanValue(); },
        "allowFormatCells": n => { workbookWorksheetProtectionOptions.allowFormatCells = n.getBooleanValue(); },
        "allowFormatColumns": n => { workbookWorksheetProtectionOptions.allowFormatColumns = n.getBooleanValue(); },
        "allowFormatRows": n => { workbookWorksheetProtectionOptions.allowFormatRows = n.getBooleanValue(); },
        "allowInsertColumns": n => { workbookWorksheetProtectionOptions.allowInsertColumns = n.getBooleanValue(); },
        "allowInsertHyperlinks": n => { workbookWorksheetProtectionOptions.allowInsertHyperlinks = n.getBooleanValue(); },
        "allowInsertRows": n => { workbookWorksheetProtectionOptions.allowInsertRows = n.getBooleanValue(); },
        "allowPivotTables": n => { workbookWorksheetProtectionOptions.allowPivotTables = n.getBooleanValue(); },
        "allowSort": n => { workbookWorksheetProtectionOptions.allowSort = n.getBooleanValue(); },
        "@odata.type": n => { workbookWorksheetProtectionOptions.odataType = n.getStringValue(); },
    }
}
export interface Entity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The unique identifier for an entity. Read-only.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBaseCollectionPaginationCountResponse(writer: SerializationWriter, baseCollectionPaginationCountResponse: Partial<BaseCollectionPaginationCountResponse> | undefined = {}) : void {
    writer.writeNumberValue("@odata.count", baseCollectionPaginationCountResponse.odataCount);
    writer.writeStringValue("@odata.nextLink", baseCollectionPaginationCountResponse.odataNextLink);
    writer.writeAdditionalData(baseCollectionPaginationCountResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeEntity(writer: SerializationWriter, entity: Partial<Entity> | undefined = {}) : void {
    writer.writeStringValue("id", entity.id);
    writer.writeStringValue("@odata.type", entity.odataType);
    writer.writeAdditionalData(entity.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbook(writer: SerializationWriter, workbook: Partial<Workbook> | undefined = {}) : void {
    serializeEntity(writer, workbook)
    writer.writeObjectValue<WorkbookApplication>("application", workbook.application, serializeWorkbookApplication);
    writer.writeCollectionOfObjectValues<WorkbookComment>("comments", workbook.comments, serializeWorkbookComment);
    writer.writeObjectValue<WorkbookFunctions>("functions", workbook.functions, serializeWorkbookFunctions);
    writer.writeCollectionOfObjectValues<WorkbookNamedItem>("names", workbook.names, serializeWorkbookNamedItem);
    writer.writeCollectionOfObjectValues<WorkbookOperation>("operations", workbook.operations, serializeWorkbookOperation);
    writer.writeCollectionOfObjectValues<WorkbookTable>("tables", workbook.tables, serializeWorkbookTable);
    writer.writeCollectionOfObjectValues<WorkbookWorksheet>("worksheets", workbook.worksheets, serializeWorkbookWorksheet);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookApplication(writer: SerializationWriter, workbookApplication: Partial<WorkbookApplication> | undefined = {}) : void {
    serializeEntity(writer, workbookApplication)
    writer.writeStringValue("calculationMode", workbookApplication.calculationMode);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChart(writer: SerializationWriter, workbookChart: Partial<WorkbookChart> | undefined = {}) : void {
    serializeEntity(writer, workbookChart)
    writer.writeObjectValue<WorkbookChartAxes>("axes", workbookChart.axes, serializeWorkbookChartAxes);
    writer.writeObjectValue<WorkbookChartDataLabels>("dataLabels", workbookChart.dataLabels, serializeWorkbookChartDataLabels);
    writer.writeObjectValue<WorkbookChartAreaFormat>("format", workbookChart.format, serializeWorkbookChartAreaFormat);
    writer.writeNumberValue("height", workbookChart.height);
    writer.writeNumberValue("left", workbookChart.left);
    writer.writeObjectValue<WorkbookChartLegend>("legend", workbookChart.legend, serializeWorkbookChartLegend);
    writer.writeStringValue("name", workbookChart.name);
    writer.writeCollectionOfObjectValues<WorkbookChartSeries>("series", workbookChart.series, serializeWorkbookChartSeries);
    writer.writeObjectValue<WorkbookChartTitle>("title", workbookChart.title, serializeWorkbookChartTitle);
    writer.writeNumberValue("top", workbookChart.top);
    writer.writeNumberValue("width", workbookChart.width);
    writer.writeObjectValue<WorkbookWorksheet>("worksheet", workbookChart.worksheet, serializeWorkbookWorksheet);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartAreaFormat(writer: SerializationWriter, workbookChartAreaFormat: Partial<WorkbookChartAreaFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartAreaFormat)
    writer.writeObjectValue<WorkbookChartFill>("fill", workbookChartAreaFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValue<WorkbookChartFont>("font", workbookChartAreaFormat.font, serializeWorkbookChartFont);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartAxes(writer: SerializationWriter, workbookChartAxes: Partial<WorkbookChartAxes> | undefined = {}) : void {
    serializeEntity(writer, workbookChartAxes)
    writer.writeObjectValue<WorkbookChartAxis>("categoryAxis", workbookChartAxes.categoryAxis, serializeWorkbookChartAxis);
    writer.writeObjectValue<WorkbookChartAxis>("seriesAxis", workbookChartAxes.seriesAxis, serializeWorkbookChartAxis);
    writer.writeObjectValue<WorkbookChartAxis>("valueAxis", workbookChartAxes.valueAxis, serializeWorkbookChartAxis);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartAxis(writer: SerializationWriter, workbookChartAxis: Partial<WorkbookChartAxis> | undefined = {}) : void {
    serializeEntity(writer, workbookChartAxis)
    writer.writeObjectValue<WorkbookChartAxisFormat>("format", workbookChartAxis.format, serializeWorkbookChartAxisFormat);
    writer.writeObjectValue<WorkbookChartGridlines>("majorGridlines", workbookChartAxis.majorGridlines, serializeWorkbookChartGridlines);
    writer.writeObjectValue("majorUnit", workbookChartAxis.majorUnit);
    writer.writeObjectValue("maximum", workbookChartAxis.maximum);
    writer.writeObjectValue("minimum", workbookChartAxis.minimum);
    writer.writeObjectValue<WorkbookChartGridlines>("minorGridlines", workbookChartAxis.minorGridlines, serializeWorkbookChartGridlines);
    writer.writeObjectValue("minorUnit", workbookChartAxis.minorUnit);
    writer.writeObjectValue<WorkbookChartAxisTitle>("title", workbookChartAxis.title, serializeWorkbookChartAxisTitle);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartAxisFormat(writer: SerializationWriter, workbookChartAxisFormat: Partial<WorkbookChartAxisFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartAxisFormat)
    writer.writeObjectValue<WorkbookChartFont>("font", workbookChartAxisFormat.font, serializeWorkbookChartFont);
    writer.writeObjectValue<WorkbookChartLineFormat>("line", workbookChartAxisFormat.line, serializeWorkbookChartLineFormat);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartAxisTitle(writer: SerializationWriter, workbookChartAxisTitle: Partial<WorkbookChartAxisTitle> | undefined = {}) : void {
    serializeEntity(writer, workbookChartAxisTitle)
    writer.writeObjectValue<WorkbookChartAxisTitleFormat>("format", workbookChartAxisTitle.format, serializeWorkbookChartAxisTitleFormat);
    writer.writeStringValue("text", workbookChartAxisTitle.text);
    writer.writeBooleanValue("visible", workbookChartAxisTitle.visible);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartAxisTitleFormat(writer: SerializationWriter, workbookChartAxisTitleFormat: Partial<WorkbookChartAxisTitleFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartAxisTitleFormat)
    writer.writeObjectValue<WorkbookChartFont>("font", workbookChartAxisTitleFormat.font, serializeWorkbookChartFont);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartCollectionResponse(writer: SerializationWriter, workbookChartCollectionResponse: Partial<WorkbookChartCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookChartCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookChart>("value", workbookChartCollectionResponse.value, serializeWorkbookChart);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartDataLabelFormat(writer: SerializationWriter, workbookChartDataLabelFormat: Partial<WorkbookChartDataLabelFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartDataLabelFormat)
    writer.writeObjectValue<WorkbookChartFill>("fill", workbookChartDataLabelFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValue<WorkbookChartFont>("font", workbookChartDataLabelFormat.font, serializeWorkbookChartFont);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartDataLabels(writer: SerializationWriter, workbookChartDataLabels: Partial<WorkbookChartDataLabels> | undefined = {}) : void {
    serializeEntity(writer, workbookChartDataLabels)
    writer.writeObjectValue<WorkbookChartDataLabelFormat>("format", workbookChartDataLabels.format, serializeWorkbookChartDataLabelFormat);
    writer.writeStringValue("position", workbookChartDataLabels.position);
    writer.writeStringValue("separator", workbookChartDataLabels.separator);
    writer.writeBooleanValue("showBubbleSize", workbookChartDataLabels.showBubbleSize);
    writer.writeBooleanValue("showCategoryName", workbookChartDataLabels.showCategoryName);
    writer.writeBooleanValue("showLegendKey", workbookChartDataLabels.showLegendKey);
    writer.writeBooleanValue("showPercentage", workbookChartDataLabels.showPercentage);
    writer.writeBooleanValue("showSeriesName", workbookChartDataLabels.showSeriesName);
    writer.writeBooleanValue("showValue", workbookChartDataLabels.showValue);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartFill(writer: SerializationWriter, workbookChartFill: Partial<WorkbookChartFill> | undefined = {}) : void {
    serializeEntity(writer, workbookChartFill)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartFont(writer: SerializationWriter, workbookChartFont: Partial<WorkbookChartFont> | undefined = {}) : void {
    serializeEntity(writer, workbookChartFont)
    writer.writeBooleanValue("bold", workbookChartFont.bold);
    writer.writeStringValue("color", workbookChartFont.color);
    writer.writeBooleanValue("italic", workbookChartFont.italic);
    writer.writeStringValue("name", workbookChartFont.name);
    writer.writeNumberValue("size", workbookChartFont.size);
    writer.writeStringValue("underline", workbookChartFont.underline);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartGridlines(writer: SerializationWriter, workbookChartGridlines: Partial<WorkbookChartGridlines> | undefined = {}) : void {
    serializeEntity(writer, workbookChartGridlines)
    writer.writeObjectValue<WorkbookChartGridlinesFormat>("format", workbookChartGridlines.format, serializeWorkbookChartGridlinesFormat);
    writer.writeBooleanValue("visible", workbookChartGridlines.visible);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartGridlinesFormat(writer: SerializationWriter, workbookChartGridlinesFormat: Partial<WorkbookChartGridlinesFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartGridlinesFormat)
    writer.writeObjectValue<WorkbookChartLineFormat>("line", workbookChartGridlinesFormat.line, serializeWorkbookChartLineFormat);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartLegend(writer: SerializationWriter, workbookChartLegend: Partial<WorkbookChartLegend> | undefined = {}) : void {
    serializeEntity(writer, workbookChartLegend)
    writer.writeObjectValue<WorkbookChartLegendFormat>("format", workbookChartLegend.format, serializeWorkbookChartLegendFormat);
    writer.writeBooleanValue("overlay", workbookChartLegend.overlay);
    writer.writeStringValue("position", workbookChartLegend.position);
    writer.writeBooleanValue("visible", workbookChartLegend.visible);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartLegendFormat(writer: SerializationWriter, workbookChartLegendFormat: Partial<WorkbookChartLegendFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartLegendFormat)
    writer.writeObjectValue<WorkbookChartFill>("fill", workbookChartLegendFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValue<WorkbookChartFont>("font", workbookChartLegendFormat.font, serializeWorkbookChartFont);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartLineFormat(writer: SerializationWriter, workbookChartLineFormat: Partial<WorkbookChartLineFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartLineFormat)
    writer.writeStringValue("color", workbookChartLineFormat.color);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartPoint(writer: SerializationWriter, workbookChartPoint: Partial<WorkbookChartPoint> | undefined = {}) : void {
    serializeEntity(writer, workbookChartPoint)
    writer.writeObjectValue<WorkbookChartPointFormat>("format", workbookChartPoint.format, serializeWorkbookChartPointFormat);
    writer.writeObjectValue("value", workbookChartPoint.value);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartPointCollectionResponse(writer: SerializationWriter, workbookChartPointCollectionResponse: Partial<WorkbookChartPointCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookChartPointCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookChartPoint>("value", workbookChartPointCollectionResponse.value, serializeWorkbookChartPoint);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartPointFormat(writer: SerializationWriter, workbookChartPointFormat: Partial<WorkbookChartPointFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartPointFormat)
    writer.writeObjectValue<WorkbookChartFill>("fill", workbookChartPointFormat.fill, serializeWorkbookChartFill);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartSeries(writer: SerializationWriter, workbookChartSeries: Partial<WorkbookChartSeries> | undefined = {}) : void {
    serializeEntity(writer, workbookChartSeries)
    writer.writeObjectValue<WorkbookChartSeriesFormat>("format", workbookChartSeries.format, serializeWorkbookChartSeriesFormat);
    writer.writeStringValue("name", workbookChartSeries.name);
    writer.writeCollectionOfObjectValues<WorkbookChartPoint>("points", workbookChartSeries.points, serializeWorkbookChartPoint);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartSeriesCollectionResponse(writer: SerializationWriter, workbookChartSeriesCollectionResponse: Partial<WorkbookChartSeriesCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookChartSeriesCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookChartSeries>("value", workbookChartSeriesCollectionResponse.value, serializeWorkbookChartSeries);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartSeriesFormat(writer: SerializationWriter, workbookChartSeriesFormat: Partial<WorkbookChartSeriesFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartSeriesFormat)
    writer.writeObjectValue<WorkbookChartFill>("fill", workbookChartSeriesFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValue<WorkbookChartLineFormat>("line", workbookChartSeriesFormat.line, serializeWorkbookChartLineFormat);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartTitle(writer: SerializationWriter, workbookChartTitle: Partial<WorkbookChartTitle> | undefined = {}) : void {
    serializeEntity(writer, workbookChartTitle)
    writer.writeObjectValue<WorkbookChartTitleFormat>("format", workbookChartTitle.format, serializeWorkbookChartTitleFormat);
    writer.writeBooleanValue("overlay", workbookChartTitle.overlay);
    writer.writeStringValue("text", workbookChartTitle.text);
    writer.writeBooleanValue("visible", workbookChartTitle.visible);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookChartTitleFormat(writer: SerializationWriter, workbookChartTitleFormat: Partial<WorkbookChartTitleFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookChartTitleFormat)
    writer.writeObjectValue<WorkbookChartFill>("fill", workbookChartTitleFormat.fill, serializeWorkbookChartFill);
    writer.writeObjectValue<WorkbookChartFont>("font", workbookChartTitleFormat.font, serializeWorkbookChartFont);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookComment(writer: SerializationWriter, workbookComment: Partial<WorkbookComment> | undefined = {}) : void {
    serializeEntity(writer, workbookComment)
    writer.writeStringValue("content", workbookComment.content);
    writer.writeStringValue("contentType", workbookComment.contentType);
    writer.writeCollectionOfObjectValues<WorkbookCommentReply>("replies", workbookComment.replies, serializeWorkbookCommentReply);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookCommentCollectionResponse(writer: SerializationWriter, workbookCommentCollectionResponse: Partial<WorkbookCommentCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookCommentCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookComment>("value", workbookCommentCollectionResponse.value, serializeWorkbookComment);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookCommentReply(writer: SerializationWriter, workbookCommentReply: Partial<WorkbookCommentReply> | undefined = {}) : void {
    serializeEntity(writer, workbookCommentReply)
    writer.writeStringValue("content", workbookCommentReply.content);
    writer.writeStringValue("contentType", workbookCommentReply.contentType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookCommentReplyCollectionResponse(writer: SerializationWriter, workbookCommentReplyCollectionResponse: Partial<WorkbookCommentReplyCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookCommentReplyCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookCommentReply>("value", workbookCommentReplyCollectionResponse.value, serializeWorkbookCommentReply);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookFilter(writer: SerializationWriter, workbookFilter: Partial<WorkbookFilter> | undefined = {}) : void {
    serializeEntity(writer, workbookFilter)
    writer.writeObjectValue<WorkbookFilterCriteria>("criteria", workbookFilter.criteria, serializeWorkbookFilterCriteria);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookFilterCriteria(writer: SerializationWriter, workbookFilterCriteria: Partial<WorkbookFilterCriteria> | undefined = {}) : void {
    writer.writeStringValue("color", workbookFilterCriteria.color);
    writer.writeStringValue("criterion1", workbookFilterCriteria.criterion1);
    writer.writeStringValue("criterion2", workbookFilterCriteria.criterion2);
    writer.writeStringValue("dynamicCriteria", workbookFilterCriteria.dynamicCriteria);
    writer.writeStringValue("filterOn", workbookFilterCriteria.filterOn);
    writer.writeObjectValue<WorkbookIcon>("icon", workbookFilterCriteria.icon, serializeWorkbookIcon);
    writer.writeStringValue("@odata.type", workbookFilterCriteria.odataType);
    writer.writeStringValue("operator", workbookFilterCriteria.operator);
    writer.writeObjectValue("values", workbookFilterCriteria.values);
    writer.writeAdditionalData(workbookFilterCriteria.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookFormatProtection(writer: SerializationWriter, workbookFormatProtection: Partial<WorkbookFormatProtection> | undefined = {}) : void {
    serializeEntity(writer, workbookFormatProtection)
    writer.writeBooleanValue("formulaHidden", workbookFormatProtection.formulaHidden);
    writer.writeBooleanValue("locked", workbookFormatProtection.locked);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookFunctionResult(writer: SerializationWriter, workbookFunctionResult: Partial<WorkbookFunctionResult> | undefined = {}) : void {
    serializeEntity(writer, workbookFunctionResult)
    writer.writeStringValue("error", workbookFunctionResult.errorEscaped);
    writer.writeObjectValue("value", workbookFunctionResult.value);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookFunctions(writer: SerializationWriter, workbookFunctions: Partial<WorkbookFunctions> | undefined = {}) : void {
    serializeEntity(writer, workbookFunctions)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookIcon(writer: SerializationWriter, workbookIcon: Partial<WorkbookIcon> | undefined = {}) : void {
    writer.writeNumberValue("index", workbookIcon.index);
    writer.writeStringValue("@odata.type", workbookIcon.odataType);
    writer.writeStringValue("set", workbookIcon.set);
    writer.writeAdditionalData(workbookIcon.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookNamedItem(writer: SerializationWriter, workbookNamedItem: Partial<WorkbookNamedItem> | undefined = {}) : void {
    serializeEntity(writer, workbookNamedItem)
    writer.writeStringValue("comment", workbookNamedItem.comment);
    writer.writeStringValue("name", workbookNamedItem.name);
    writer.writeStringValue("scope", workbookNamedItem.scope);
    writer.writeStringValue("type", workbookNamedItem.type);
    writer.writeObjectValue("value", workbookNamedItem.value);
    writer.writeBooleanValue("visible", workbookNamedItem.visible);
    writer.writeObjectValue<WorkbookWorksheet>("worksheet", workbookNamedItem.worksheet, serializeWorkbookWorksheet);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookNamedItemCollectionResponse(writer: SerializationWriter, workbookNamedItemCollectionResponse: Partial<WorkbookNamedItemCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookNamedItemCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookNamedItem>("value", workbookNamedItemCollectionResponse.value, serializeWorkbookNamedItem);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookOperation(writer: SerializationWriter, workbookOperation: Partial<WorkbookOperation> | undefined = {}) : void {
    serializeEntity(writer, workbookOperation)
    writer.writeObjectValue<WorkbookOperationError>("error", workbookOperation.errorEscaped, serializeWorkbookOperationError);
    writer.writeStringValue("resourceLocation", workbookOperation.resourceLocation);
    writer.writeEnumValue<WorkbookOperationStatus>("status", workbookOperation.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookOperationCollectionResponse(writer: SerializationWriter, workbookOperationCollectionResponse: Partial<WorkbookOperationCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookOperationCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookOperation>("value", workbookOperationCollectionResponse.value, serializeWorkbookOperation);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookOperationError(writer: SerializationWriter, workbookOperationError: Partial<WorkbookOperationError> | undefined = {}) : void {
    writer.writeStringValue("code", workbookOperationError.code);
    writer.writeObjectValue<WorkbookOperationError>("innerError", workbookOperationError.innerError, serializeWorkbookOperationError);
    writer.writeStringValue("message", workbookOperationError.message);
    writer.writeStringValue("@odata.type", workbookOperationError.odataType);
    writer.writeAdditionalData(workbookOperationError.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookPivotTable(writer: SerializationWriter, workbookPivotTable: Partial<WorkbookPivotTable> | undefined = {}) : void {
    serializeEntity(writer, workbookPivotTable)
    writer.writeStringValue("name", workbookPivotTable.name);
    writer.writeObjectValue<WorkbookWorksheet>("worksheet", workbookPivotTable.worksheet, serializeWorkbookWorksheet);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookPivotTableCollectionResponse(writer: SerializationWriter, workbookPivotTableCollectionResponse: Partial<WorkbookPivotTableCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookPivotTableCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookPivotTable>("value", workbookPivotTableCollectionResponse.value, serializeWorkbookPivotTable);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookRange(writer: SerializationWriter, workbookRange: Partial<WorkbookRange> | undefined = {}) : void {
    serializeEntity(writer, workbookRange)
    writer.writeStringValue("address", workbookRange.address);
    writer.writeStringValue("addressLocal", workbookRange.addressLocal);
    writer.writeNumberValue("cellCount", workbookRange.cellCount);
    writer.writeNumberValue("columnCount", workbookRange.columnCount);
    writer.writeBooleanValue("columnHidden", workbookRange.columnHidden);
    writer.writeNumberValue("columnIndex", workbookRange.columnIndex);
    writer.writeObjectValue<WorkbookRangeFormat>("format", workbookRange.format, serializeWorkbookRangeFormat);
    writer.writeObjectValue("formulas", workbookRange.formulas);
    writer.writeObjectValue("formulasLocal", workbookRange.formulasLocal);
    writer.writeObjectValue("formulasR1C1", workbookRange.formulasR1C1);
    writer.writeBooleanValue("hidden", workbookRange.hidden);
    writer.writeObjectValue("numberFormat", workbookRange.numberFormat);
    writer.writeNumberValue("rowCount", workbookRange.rowCount);
    writer.writeBooleanValue("rowHidden", workbookRange.rowHidden);
    writer.writeNumberValue("rowIndex", workbookRange.rowIndex);
    writer.writeObjectValue<WorkbookRangeSort>("sort", workbookRange.sort, serializeWorkbookRangeSort);
    writer.writeObjectValue("text", workbookRange.text);
    writer.writeObjectValue("values", workbookRange.values);
    writer.writeObjectValue("valueTypes", workbookRange.valueTypes);
    writer.writeObjectValue<WorkbookWorksheet>("worksheet", workbookRange.worksheet, serializeWorkbookWorksheet);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookRangeBorder(writer: SerializationWriter, workbookRangeBorder: Partial<WorkbookRangeBorder> | undefined = {}) : void {
    serializeEntity(writer, workbookRangeBorder)
    writer.writeStringValue("color", workbookRangeBorder.color);
    writer.writeStringValue("sideIndex", workbookRangeBorder.sideIndex);
    writer.writeStringValue("style", workbookRangeBorder.style);
    writer.writeStringValue("weight", workbookRangeBorder.weight);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookRangeFill(writer: SerializationWriter, workbookRangeFill: Partial<WorkbookRangeFill> | undefined = {}) : void {
    serializeEntity(writer, workbookRangeFill)
    writer.writeStringValue("color", workbookRangeFill.color);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookRangeFont(writer: SerializationWriter, workbookRangeFont: Partial<WorkbookRangeFont> | undefined = {}) : void {
    serializeEntity(writer, workbookRangeFont)
    writer.writeBooleanValue("bold", workbookRangeFont.bold);
    writer.writeStringValue("color", workbookRangeFont.color);
    writer.writeBooleanValue("italic", workbookRangeFont.italic);
    writer.writeStringValue("name", workbookRangeFont.name);
    writer.writeNumberValue("size", workbookRangeFont.size);
    writer.writeStringValue("underline", workbookRangeFont.underline);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookRangeFormat(writer: SerializationWriter, workbookRangeFormat: Partial<WorkbookRangeFormat> | undefined = {}) : void {
    serializeEntity(writer, workbookRangeFormat)
    writer.writeCollectionOfObjectValues<WorkbookRangeBorder>("borders", workbookRangeFormat.borders, serializeWorkbookRangeBorder);
    writer.writeNumberValue("columnWidth", workbookRangeFormat.columnWidth);
    writer.writeObjectValue<WorkbookRangeFill>("fill", workbookRangeFormat.fill, serializeWorkbookRangeFill);
    writer.writeObjectValue<WorkbookRangeFont>("font", workbookRangeFormat.font, serializeWorkbookRangeFont);
    writer.writeStringValue("horizontalAlignment", workbookRangeFormat.horizontalAlignment);
    writer.writeObjectValue<WorkbookFormatProtection>("protection", workbookRangeFormat.protection, serializeWorkbookFormatProtection);
    writer.writeNumberValue("rowHeight", workbookRangeFormat.rowHeight);
    writer.writeStringValue("verticalAlignment", workbookRangeFormat.verticalAlignment);
    writer.writeBooleanValue("wrapText", workbookRangeFormat.wrapText);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookRangeSort(writer: SerializationWriter, workbookRangeSort: Partial<WorkbookRangeSort> | undefined = {}) : void {
    serializeEntity(writer, workbookRangeSort)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookSessionInfo(writer: SerializationWriter, workbookSessionInfo: Partial<WorkbookSessionInfo> | undefined = {}) : void {
    writer.writeStringValue("id", workbookSessionInfo.id);
    writer.writeStringValue("@odata.type", workbookSessionInfo.odataType);
    writer.writeBooleanValue("persistChanges", workbookSessionInfo.persistChanges);
    writer.writeAdditionalData(workbookSessionInfo.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookSortField(writer: SerializationWriter, workbookSortField: Partial<WorkbookSortField> | undefined = {}) : void {
    writer.writeBooleanValue("ascending", workbookSortField.ascending);
    writer.writeStringValue("color", workbookSortField.color);
    writer.writeStringValue("dataOption", workbookSortField.dataOption);
    writer.writeObjectValue<WorkbookIcon>("icon", workbookSortField.icon, serializeWorkbookIcon);
    writer.writeNumberValue("key", workbookSortField.key);
    writer.writeStringValue("@odata.type", workbookSortField.odataType);
    writer.writeStringValue("sortOn", workbookSortField.sortOn);
    writer.writeAdditionalData(workbookSortField.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookTable(writer: SerializationWriter, workbookTable: Partial<WorkbookTable> | undefined = {}) : void {
    serializeEntity(writer, workbookTable)
    writer.writeCollectionOfObjectValues<WorkbookTableColumn>("columns", workbookTable.columns, serializeWorkbookTableColumn);
    writer.writeBooleanValue("highlightFirstColumn", workbookTable.highlightFirstColumn);
    writer.writeBooleanValue("highlightLastColumn", workbookTable.highlightLastColumn);
    writer.writeStringValue("legacyId", workbookTable.legacyId);
    writer.writeStringValue("name", workbookTable.name);
    writer.writeCollectionOfObjectValues<WorkbookTableRow>("rows", workbookTable.rows, serializeWorkbookTableRow);
    writer.writeBooleanValue("showBandedColumns", workbookTable.showBandedColumns);
    writer.writeBooleanValue("showBandedRows", workbookTable.showBandedRows);
    writer.writeBooleanValue("showFilterButton", workbookTable.showFilterButton);
    writer.writeBooleanValue("showHeaders", workbookTable.showHeaders);
    writer.writeBooleanValue("showTotals", workbookTable.showTotals);
    writer.writeObjectValue<WorkbookTableSort>("sort", workbookTable.sort, serializeWorkbookTableSort);
    writer.writeStringValue("style", workbookTable.style);
    writer.writeObjectValue<WorkbookWorksheet>("worksheet", workbookTable.worksheet, serializeWorkbookWorksheet);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookTableCollectionResponse(writer: SerializationWriter, workbookTableCollectionResponse: Partial<WorkbookTableCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookTableCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookTable>("value", workbookTableCollectionResponse.value, serializeWorkbookTable);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookTableColumn(writer: SerializationWriter, workbookTableColumn: Partial<WorkbookTableColumn> | undefined = {}) : void {
    serializeEntity(writer, workbookTableColumn)
    writer.writeObjectValue<WorkbookFilter>("filter", workbookTableColumn.filter, serializeWorkbookFilter);
    writer.writeNumberValue("index", workbookTableColumn.index);
    writer.writeStringValue("name", workbookTableColumn.name);
    writer.writeObjectValue("values", workbookTableColumn.values);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookTableColumnCollectionResponse(writer: SerializationWriter, workbookTableColumnCollectionResponse: Partial<WorkbookTableColumnCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookTableColumnCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookTableColumn>("value", workbookTableColumnCollectionResponse.value, serializeWorkbookTableColumn);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookTableRow(writer: SerializationWriter, workbookTableRow: Partial<WorkbookTableRow> | undefined = {}) : void {
    serializeEntity(writer, workbookTableRow)
    writer.writeNumberValue("index", workbookTableRow.index);
    writer.writeObjectValue("values", workbookTableRow.values);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookTableRowCollectionResponse(writer: SerializationWriter, workbookTableRowCollectionResponse: Partial<WorkbookTableRowCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookTableRowCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookTableRow>("value", workbookTableRowCollectionResponse.value, serializeWorkbookTableRow);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookTableSort(writer: SerializationWriter, workbookTableSort: Partial<WorkbookTableSort> | undefined = {}) : void {
    serializeEntity(writer, workbookTableSort)
    writer.writeCollectionOfObjectValues<WorkbookSortField>("fields", workbookTableSort.fields, serializeWorkbookSortField);
    writer.writeBooleanValue("matchCase", workbookTableSort.matchCase);
    writer.writeStringValue("method", workbookTableSort.method);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookWorksheet(writer: SerializationWriter, workbookWorksheet: Partial<WorkbookWorksheet> | undefined = {}) : void {
    serializeEntity(writer, workbookWorksheet)
    writer.writeCollectionOfObjectValues<WorkbookChart>("charts", workbookWorksheet.charts, serializeWorkbookChart);
    writer.writeStringValue("name", workbookWorksheet.name);
    writer.writeCollectionOfObjectValues<WorkbookNamedItem>("names", workbookWorksheet.names, serializeWorkbookNamedItem);
    writer.writeCollectionOfObjectValues<WorkbookPivotTable>("pivotTables", workbookWorksheet.pivotTables, serializeWorkbookPivotTable);
    writer.writeNumberValue("position", workbookWorksheet.position);
    writer.writeObjectValue<WorkbookWorksheetProtection>("protection", workbookWorksheet.protection, serializeWorkbookWorksheetProtection);
    writer.writeCollectionOfObjectValues<WorkbookTable>("tables", workbookWorksheet.tables, serializeWorkbookTable);
    writer.writeStringValue("visibility", workbookWorksheet.visibility);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookWorksheetCollectionResponse(writer: SerializationWriter, workbookWorksheetCollectionResponse: Partial<WorkbookWorksheetCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workbookWorksheetCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkbookWorksheet>("value", workbookWorksheetCollectionResponse.value, serializeWorkbookWorksheet);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookWorksheetProtection(writer: SerializationWriter, workbookWorksheetProtection: Partial<WorkbookWorksheetProtection> | undefined = {}) : void {
    serializeEntity(writer, workbookWorksheetProtection)
    writer.writeObjectValue<WorkbookWorksheetProtectionOptions>("options", workbookWorksheetProtection.options, serializeWorkbookWorksheetProtectionOptions);
    writer.writeBooleanValue("protected", workbookWorksheetProtection.protected);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkbookWorksheetProtectionOptions(writer: SerializationWriter, workbookWorksheetProtectionOptions: Partial<WorkbookWorksheetProtectionOptions> | undefined = {}) : void {
    writer.writeBooleanValue("allowAutoFilter", workbookWorksheetProtectionOptions.allowAutoFilter);
    writer.writeBooleanValue("allowDeleteColumns", workbookWorksheetProtectionOptions.allowDeleteColumns);
    writer.writeBooleanValue("allowDeleteRows", workbookWorksheetProtectionOptions.allowDeleteRows);
    writer.writeBooleanValue("allowFormatCells", workbookWorksheetProtectionOptions.allowFormatCells);
    writer.writeBooleanValue("allowFormatColumns", workbookWorksheetProtectionOptions.allowFormatColumns);
    writer.writeBooleanValue("allowFormatRows", workbookWorksheetProtectionOptions.allowFormatRows);
    writer.writeBooleanValue("allowInsertColumns", workbookWorksheetProtectionOptions.allowInsertColumns);
    writer.writeBooleanValue("allowInsertHyperlinks", workbookWorksheetProtectionOptions.allowInsertHyperlinks);
    writer.writeBooleanValue("allowInsertRows", workbookWorksheetProtectionOptions.allowInsertRows);
    writer.writeBooleanValue("allowPivotTables", workbookWorksheetProtectionOptions.allowPivotTables);
    writer.writeBooleanValue("allowSort", workbookWorksheetProtectionOptions.allowSort);
    writer.writeStringValue("@odata.type", workbookWorksheetProtectionOptions.odataType);
    writer.writeAdditionalData(workbookWorksheetProtectionOptions.additionalData);
}
export interface Workbook extends Entity, Parsable {
    /**
     * The application property
     */
    application?: WorkbookApplication;
    /**
     * Represents a collection of comments in a workbook.
     */
    comments?: WorkbookComment[];
    /**
     * The functions property
     */
    functions?: WorkbookFunctions;
    /**
     * Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.
     */
    names?: WorkbookNamedItem[];
    /**
     * The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.
     */
    operations?: WorkbookOperation[];
    /**
     * Represents a collection of tables associated with the workbook. Read-only.
     */
    tables?: WorkbookTable[];
    /**
     * Represents a collection of worksheets associated with the workbook. Read-only.
     */
    worksheets?: WorkbookWorksheet[];
}
export interface WorkbookApplication extends Entity, Parsable {
    /**
     * Returns the calculation mode used in the workbook. Possible values are: Automatic, AutomaticExceptTables, Manual.
     */
    calculationMode?: string;
}
export interface WorkbookChart extends Entity, Parsable {
    /**
     * Represents chart axes. Read-only.
     */
    axes?: WorkbookChartAxes;
    /**
     * Represents the data labels on the chart. Read-only.
     */
    dataLabels?: WorkbookChartDataLabels;
    /**
     * Encapsulates the format properties for the chart area. Read-only.
     */
    format?: WorkbookChartAreaFormat;
    /**
     * Represents the height, in points, of the chart object.
     */
    height?: number;
    /**
     * The distance, in points, from the left side of the chart to the worksheet origin.
     */
    left?: number;
    /**
     * Represents the legend for the chart. Read-only.
     */
    legend?: WorkbookChartLegend;
    /**
     * Represents the name of a chart object.
     */
    name?: string;
    /**
     * Represents either a single series or collection of series in the chart. Read-only.
     */
    series?: WorkbookChartSeries[];
    /**
     * Represents the title of the specified chart, including the text, visibility, position and formatting of the title. Read-only.
     */
    title?: WorkbookChartTitle;
    /**
     * Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
     */
    top?: number;
    /**
     * Represents the width, in points, of the chart object.
     */
    width?: number;
    /**
     * The worksheet containing the current chart. Read-only.
     */
    worksheet?: WorkbookWorksheet;
}
export interface WorkbookChartAreaFormat extends Entity, Parsable {
    /**
     * Represents the fill format of an object, which includes background formatting information. Read-only.
     */
    fill?: WorkbookChartFill;
    /**
     * Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
     */
    font?: WorkbookChartFont;
}
export interface WorkbookChartAxes extends Entity, Parsable {
    /**
     * Represents the category axis in a chart. Read-only.
     */
    categoryAxis?: WorkbookChartAxis;
    /**
     * Represents the series axis of a 3-dimensional chart. Read-only.
     */
    seriesAxis?: WorkbookChartAxis;
    /**
     * Represents the value axis in an axis. Read-only.
     */
    valueAxis?: WorkbookChartAxis;
}
export interface WorkbookChartAxis extends Entity, Parsable {
    /**
     * Represents the formatting of a chart object, which includes line and font formatting. Read-only.
     */
    format?: WorkbookChartAxisFormat;
    /**
     * Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.
     */
    majorGridlines?: WorkbookChartGridlines;
    /**
     * Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.
     */
    majorUnit?: UntypedNode;
    /**
     * Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
     */
    maximum?: UntypedNode;
    /**
     * Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
     */
    minimum?: UntypedNode;
    /**
     * Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.
     */
    minorGridlines?: WorkbookChartGridlines;
    /**
     * Represents the interval between two minor tick marks. 'Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.
     */
    minorUnit?: UntypedNode;
    /**
     * Represents the axis title. Read-only.
     */
    title?: WorkbookChartAxisTitle;
}
export interface WorkbookChartAxisFormat extends Entity, Parsable {
    /**
     * Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.
     */
    font?: WorkbookChartFont;
    /**
     * Represents chart line formatting. Read-only.
     */
    line?: WorkbookChartLineFormat;
}
export interface WorkbookChartAxisTitle extends Entity, Parsable {
    /**
     * Represents the formatting of chart axis title. Read-only.
     */
    format?: WorkbookChartAxisTitleFormat;
    /**
     * Represents the axis title.
     */
    text?: string;
    /**
     * A boolean that specifies the visibility of an axis title.
     */
    visible?: boolean;
}
export interface WorkbookChartAxisTitleFormat extends Entity, Parsable {
    /**
     * Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.
     */
    font?: WorkbookChartFont;
}
export interface WorkbookChartCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookChart[];
}
export interface WorkbookChartDataLabelFormat extends Entity, Parsable {
    /**
     * Represents the fill format of the current chart data label. Read-only.
     */
    fill?: WorkbookChartFill;
    /**
     * Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.
     */
    font?: WorkbookChartFont;
}
export interface WorkbookChartDataLabels extends Entity, Parsable {
    /**
     * Represents the format of chart data labels, which includes fill and font formatting. Read-only.
     */
    format?: WorkbookChartDataLabelFormat;
    /**
     * DataLabelPosition value that represents the position of the data label. The possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom, BestFit, Callout.
     */
    position?: string;
    /**
     * String representing the separator used for the data labels on a chart.
     */
    separator?: string;
    /**
     * Boolean value representing if the data label bubble size is visible or not.
     */
    showBubbleSize?: boolean;
    /**
     * Boolean value representing if the data label category name is visible or not.
     */
    showCategoryName?: boolean;
    /**
     * Boolean value representing if the data label legend key is visible or not.
     */
    showLegendKey?: boolean;
    /**
     * Boolean value representing if the data label percentage is visible or not.
     */
    showPercentage?: boolean;
    /**
     * Boolean value representing if the data label series name is visible or not.
     */
    showSeriesName?: boolean;
    /**
     * Boolean value representing if the data label value is visible or not.
     */
    showValue?: boolean;
}
export interface WorkbookChartFill extends Entity, Parsable {
}
export interface WorkbookChartFont extends Entity, Parsable {
    /**
     * Represents the bold status of font.
     */
    bold?: boolean;
    /**
     * HTML color code representation of the text color. for example #FF0000 represents Red.
     */
    color?: string;
    /**
     * Represents the italic status of the font.
     */
    italic?: boolean;
    /**
     * Font name (for example 'Calibri')
     */
    name?: string;
    /**
     * Size of the font (for example 11)
     */
    size?: number;
    /**
     * Type of underline applied to the font. The possible values are: None, Single.
     */
    underline?: string;
}
export interface WorkbookChartGridlines extends Entity, Parsable {
    /**
     * Represents the formatting of chart gridlines. Read-only.
     */
    format?: WorkbookChartGridlinesFormat;
    /**
     * Boolean value representing if the axis gridlines are visible or not.
     */
    visible?: boolean;
}
export interface WorkbookChartGridlinesFormat extends Entity, Parsable {
    /**
     * Represents chart line formatting. Read-only.
     */
    line?: WorkbookChartLineFormat;
}
export interface WorkbookChartLegend extends Entity, Parsable {
    /**
     * Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.
     */
    format?: WorkbookChartLegendFormat;
    /**
     * Boolean value for whether the chart legend should overlap with the main body of the chart.
     */
    overlay?: boolean;
    /**
     * Represents the position of the legend on the chart. The possible values are: Top, Bottom, Left, Right, Corner, Custom.
     */
    position?: string;
    /**
     * A boolean value the represents the visibility of a ChartLegend object.
     */
    visible?: boolean;
}
export interface WorkbookChartLegendFormat extends Entity, Parsable {
    /**
     * Represents the fill format of an object, which includes background formating information. Read-only.
     */
    fill?: WorkbookChartFill;
    /**
     * Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.
     */
    font?: WorkbookChartFont;
}
export interface WorkbookChartLineFormat extends Entity, Parsable {
    /**
     * HTML color code representing the color of lines in the chart.
     */
    color?: string;
}
export interface WorkbookChartPoint extends Entity, Parsable {
    /**
     * Encapsulates the format properties chart point. Read-only.
     */
    format?: WorkbookChartPointFormat;
    /**
     * Returns the value of a chart point. Read-only.
     */
    value?: UntypedNode;
}
export interface WorkbookChartPointCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookChartPoint[];
}
export interface WorkbookChartPointFormat extends Entity, Parsable {
    /**
     * Represents the fill format of a chart, which includes background formatting information. Read-only.
     */
    fill?: WorkbookChartFill;
}
export interface WorkbookChartSeries extends Entity, Parsable {
    /**
     * Represents the formatting of a chart series, which includes fill and line formatting. Read-only.
     */
    format?: WorkbookChartSeriesFormat;
    /**
     * Represents the name of a series in a chart.
     */
    name?: string;
    /**
     * Represents a collection of all points in the series. Read-only.
     */
    points?: WorkbookChartPoint[];
}
export interface WorkbookChartSeriesCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookChartSeries[];
}
export interface WorkbookChartSeriesFormat extends Entity, Parsable {
    /**
     * Represents the fill format of a chart series, which includes background formatting information. Read-only.
     */
    fill?: WorkbookChartFill;
    /**
     * Represents line formatting. Read-only.
     */
    line?: WorkbookChartLineFormat;
}
export interface WorkbookChartTitle extends Entity, Parsable {
    /**
     * Represents the formatting of a chart title, which includes fill and font formatting. Read-only.
     */
    format?: WorkbookChartTitleFormat;
    /**
     * Boolean value representing if the chart title will overlay the chart or not.
     */
    overlay?: boolean;
    /**
     * Represents the title text of a chart.
     */
    text?: string;
    /**
     * A boolean value that represents the visibility of a chart title object.
     */
    visible?: boolean;
}
export interface WorkbookChartTitleFormat extends Entity, Parsable {
    /**
     * Represents the fill format of an object, which includes background formatting information. Read-only.
     */
    fill?: WorkbookChartFill;
    /**
     * Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
     */
    font?: WorkbookChartFont;
}
export interface WorkbookComment extends Entity, Parsable {
    /**
     * The content of comment.
     */
    content?: string;
    /**
     * Indicates the type for the comment.
     */
    contentType?: string;
    /**
     * The replies property
     */
    replies?: WorkbookCommentReply[];
}
export interface WorkbookCommentCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookComment[];
}
export interface WorkbookCommentReply extends Entity, Parsable {
    /**
     * The content of a comment reply.
     */
    content?: string;
    /**
     * Indicates the type for the comment reply.
     */
    contentType?: string;
}
export interface WorkbookCommentReplyCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookCommentReply[];
}
export interface WorkbookFilter extends Entity, Parsable {
    /**
     * The currently applied filter on the given column. Read-only.
     */
    criteria?: WorkbookFilterCriteria;
}
export interface WorkbookFilterCriteria extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The color applied to the cell.
     */
    color?: string;
    /**
     * A custom criterion.
     */
    criterion1?: string;
    /**
     * A custom criterion.
     */
    criterion2?: string;
    /**
     * A dynamic formula specified in a custom filter.
     */
    dynamicCriteria?: string;
    /**
     * Indicates whether a filter is applied to a column.
     */
    filterOn?: string;
    /**
     * An icon applied to a cell via conditional formatting.
     */
    icon?: WorkbookIcon;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * An operator in a cell; for example, =, >, <, <=, or <>.
     */
    operator?: string;
    /**
     * The values that appear in the cell.
     */
    values?: UntypedNode;
}
export interface WorkbookFormatProtection extends Entity, Parsable {
    /**
     * Indicates if Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.
     */
    formulaHidden?: boolean;
    /**
     * Indicates if Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.
     */
    locked?: boolean;
}
export interface WorkbookFunctionResult extends Entity, Parsable {
    /**
     * The error property
     */
    errorEscaped?: string;
    /**
     * The value property
     */
    value?: UntypedNode;
}
export interface WorkbookFunctions extends Entity, Parsable {
}
export interface WorkbookIcon extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents the index of the icon in the given set.
     */
    index?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Represents the set that the icon is part of. The possible values are: Invalid, ThreeArrows, ThreeArrowsGray, ThreeFlags, ThreeTrafficLights1, ThreeTrafficLights2, ThreeSigns, ThreeSymbols, ThreeSymbols2, FourArrows, FourArrowsGray, FourRedToBlack, FourRating, FourTrafficLights, FiveArrows, FiveArrowsGray, FiveRating, FiveQuarters, ThreeStars, ThreeTriangles, FiveBoxes.
     */
    set?: string;
}
export interface WorkbookNamedItem extends Entity, Parsable {
    /**
     * Represents the comment associated with this name.
     */
    comment?: string;
    /**
     * The name of the object. Read-only.
     */
    name?: string;
    /**
     * Indicates whether the name is scoped to the workbook or to a specific worksheet. Read-only.
     */
    scope?: string;
    /**
     * Indicates what type of reference is associated with the name. The possible values are: String, Integer, Double, Boolean, Range. Read-only.
     */
    type?: string;
    /**
     * Represents the formula that the name is defined to refer to. for example, =Sheet14!$B$2:$H$12, =4.75, etc. Read-only.
     */
    value?: UntypedNode;
    /**
     * Specifies whether the object is visible or not.
     */
    visible?: boolean;
    /**
     * Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.
     */
    worksheet?: WorkbookWorksheet;
}
export interface WorkbookNamedItemCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookNamedItem[];
}
export interface WorkbookOperation extends Entity, Parsable {
    /**
     * The error returned by the operation.
     */
    errorEscaped?: WorkbookOperationError;
    /**
     * The resource URI for the result.
     */
    resourceLocation?: string;
    /**
     * The status property
     */
    status?: WorkbookOperationStatus;
}
export interface WorkbookOperationCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookOperation[];
}
export interface WorkbookOperationError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error code.
     */
    code?: string;
    /**
     * The innerError property
     */
    innerError?: WorkbookOperationError;
    /**
     * The error message.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type WorkbookOperationStatus = (typeof WorkbookOperationStatusObject)[keyof typeof WorkbookOperationStatusObject];
export interface WorkbookPivotTable extends Entity, Parsable {
    /**
     * Name of the PivotTable.
     */
    name?: string;
    /**
     * The worksheet containing the current PivotTable. Read-only.
     */
    worksheet?: WorkbookWorksheet;
}
export interface WorkbookPivotTableCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookPivotTable[];
}
export interface WorkbookRange extends Entity, Parsable {
    /**
     * Represents the range reference in A1-style. Address value contains the Sheet reference (for example, Sheet1!A1:B4). Read-only.
     */
    address?: string;
    /**
     * Represents range reference for the specified range in the language of the user. Read-only.
     */
    addressLocal?: string;
    /**
     * Number of cells in the range. Read-only.
     */
    cellCount?: number;
    /**
     * Represents the total number of columns in the range. Read-only.
     */
    columnCount?: number;
    /**
     * Indicates whether all columns of the current range are hidden.
     */
    columnHidden?: boolean;
    /**
     * Represents the column number of the first cell in the range. Zero-indexed. Read-only.
     */
    columnIndex?: number;
    /**
     * Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.
     */
    format?: WorkbookRangeFormat;
    /**
     * Represents the formula in A1-style notation.
     */
    formulas?: UntypedNode;
    /**
     * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English '=SUM(A1, 1.5)' formula would become '=SUMME(A1; 1,5)' in German.
     */
    formulasLocal?: UntypedNode;
    /**
     * Represents the formula in R1C1-style notation.
     */
    formulasR1C1?: UntypedNode;
    /**
     * Represents if all cells of the current range are hidden. Read-only.
     */
    hidden?: boolean;
    /**
     * Represents Excel's number format code for the given cell.
     */
    numberFormat?: UntypedNode;
    /**
     * Returns the total number of rows in the range. Read-only.
     */
    rowCount?: number;
    /**
     * Indicates whether all rows of the current range are hidden.
     */
    rowHidden?: boolean;
    /**
     * Returns the row number of the first cell in the range. Zero-indexed. Read-only.
     */
    rowIndex?: number;
    /**
     * The worksheet containing the current range. Read-only.
     */
    sort?: WorkbookRangeSort;
    /**
     * Text values of the specified range. The Text value doesn't depend on the cell width. The # sign substitution that happens in Excel UI doesn't affect the text value returned by the API. Read-only.
     */
    text?: UntypedNode;
    /**
     * Represents the raw values of the specified range. The data returned can be of type string, number, or a Boolean. Cell that contains an error returns the error string.
     */
    values?: UntypedNode;
    /**
     * Represents the type of data of each cell. The possible values are: Unknown, Empty, String, Integer, Double, Boolean, Error. Read-only.
     */
    valueTypes?: UntypedNode;
    /**
     * The worksheet containing the current range. Read-only.
     */
    worksheet?: WorkbookWorksheet;
}
export interface WorkbookRangeBorder extends Entity, Parsable {
    /**
     * HTML color code representing the color of the border line, of the form #RRGGBB (for example 'FFA500') or as a named HTML color (for example 'orange').
     */
    color?: string;
    /**
     * Constant value that indicates the specific side of the border. The possible values are: EdgeTop, EdgeBottom, EdgeLeft, EdgeRight, InsideVertical, InsideHorizontal, DiagonalDown, DiagonalUp. Read-only.
     */
    sideIndex?: string;
    /**
     * One of the constants of line style specifying the line style for the border. The possible values are: None, Continuous, Dash, DashDot, DashDotDot, Dot, Double, SlantDashDot.
     */
    style?: string;
    /**
     * Specifies the weight of the border around a range. The possible values are: Hairline, Thin, Medium, Thick.
     */
    weight?: string;
}
export interface WorkbookRangeFill extends Entity, Parsable {
    /**
     * HTML color code representing the color of the border line, of the form #RRGGBB (for example 'FFA500') or as a named HTML color (for example 'orange')
     */
    color?: string;
}
export interface WorkbookRangeFont extends Entity, Parsable {
    /**
     * Represents the bold status of font.
     */
    bold?: boolean;
    /**
     * HTML color code representation of the text color. for example #FF0000 represents Red.
     */
    color?: string;
    /**
     * Represents the italic status of the font.
     */
    italic?: boolean;
    /**
     * Font name (for example 'Calibri')
     */
    name?: string;
    /**
     * Font size.
     */
    size?: number;
    /**
     * Type of underline applied to the font. The possible values are: None, Single, Double, SingleAccountant, DoubleAccountant.
     */
    underline?: string;
}
export interface WorkbookRangeFormat extends Entity, Parsable {
    /**
     * Collection of border objects that apply to the overall range selected Read-only.
     */
    borders?: WorkbookRangeBorder[];
    /**
     * Gets or sets the width of all columns within the range. If the column widths aren't uniform, null will be returned.
     */
    columnWidth?: number;
    /**
     * Returns the fill object defined on the overall range. Read-only.
     */
    fill?: WorkbookRangeFill;
    /**
     * Returns the font object defined on the overall range selected Read-only.
     */
    font?: WorkbookRangeFont;
    /**
     * Represents the horizontal alignment for the specified object. The possible values are: General, Left, Center, Right, Fill, Justify, CenterAcrossSelection, Distributed.
     */
    horizontalAlignment?: string;
    /**
     * Returns the format protection object for a range. Read-only.
     */
    protection?: WorkbookFormatProtection;
    /**
     * Gets or sets the height of all rows in the range. If the row heights aren't uniform null will be returned.
     */
    rowHeight?: number;
    /**
     * Represents the vertical alignment for the specified object. The possible values are: Top, Center, Bottom, Justify, Distributed.
     */
    verticalAlignment?: string;
    /**
     * Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting
     */
    wrapText?: boolean;
}
export interface WorkbookRangeSort extends Entity, Parsable {
}
export interface WorkbookSessionInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ID of the workbook session.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * true for persistent session. false for non-persistent session (view mode)
     */
    persistChanges?: boolean;
}
export interface WorkbookSortField extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents whether the sorting is done in an ascending fashion.
     */
    ascending?: boolean;
    /**
     * Represents the color that is the target of the condition if the sorting is on font or cell color.
     */
    color?: string;
    /**
     * Represents additional sorting options for this field. The possible values are: Normal, TextAsNumber.
     */
    dataOption?: string;
    /**
     * Represents the icon that is the target of the condition if the sorting is on the cell's icon.
     */
    icon?: WorkbookIcon;
    /**
     * Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).
     */
    key?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Represents the type of sorting of this condition. The possible values are: Value, CellColor, FontColor, Icon.
     */
    sortOn?: string;
}
export interface WorkbookTable extends Entity, Parsable {
    /**
     * Represents a collection of all the columns in the table. Read-only.
     */
    columns?: WorkbookTableColumn[];
    /**
     * Indicates whether the first column contains special formatting.
     */
    highlightFirstColumn?: boolean;
    /**
     * Indicates whether the last column contains special formatting.
     */
    highlightLastColumn?: boolean;
    /**
     * Legacy ID used in older Excel clients. The value of the identifier remains the same even when the table is renamed. This property should be interpreted as an opaque string value and shouldn't be parsed to any other type. Read-only.
     */
    legacyId?: string;
    /**
     * Name of the table.
     */
    name?: string;
    /**
     * Represents a collection of all the rows in the table. Read-only.
     */
    rows?: WorkbookTableRow[];
    /**
     * Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.
     */
    showBandedColumns?: boolean;
    /**
     * Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.
     */
    showBandedRows?: boolean;
    /**
     * Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.
     */
    showFilterButton?: boolean;
    /**
     * Indicates whether the header row is visible or not. This value can be set to show or remove the header row.
     */
    showHeaders?: boolean;
    /**
     * Indicates whether the total row is visible or not. This value can be set to show or remove the total row.
     */
    showTotals?: boolean;
    /**
     * Represents the sorting for the table. Read-only.
     */
    sort?: WorkbookTableSort;
    /**
     * Constant value that represents the Table style. The possible values are: TableStyleLight1 through TableStyleLight21, TableStyleMedium1 through TableStyleMedium28, TableStyleStyleDark1 through TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.
     */
    style?: string;
    /**
     * The worksheet containing the current table. Read-only.
     */
    worksheet?: WorkbookWorksheet;
}
export interface WorkbookTableCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookTable[];
}
export interface WorkbookTableColumn extends Entity, Parsable {
    /**
     * Retrieve the filter applied to the column. Read-only.
     */
    filter?: WorkbookFilter;
    /**
     * Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.
     */
    index?: number;
    /**
     * Returns the name of the table column.
     */
    name?: string;
    /**
     * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
     */
    values?: UntypedNode;
}
export interface WorkbookTableColumnCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookTableColumn[];
}
export interface WorkbookTableRow extends Entity, Parsable {
    /**
     * Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.
     */
    index?: number;
    /**
     * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
     */
    values?: UntypedNode;
}
export interface WorkbookTableRowCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookTableRow[];
}
export interface WorkbookTableSort extends Entity, Parsable {
    /**
     * Represents the current conditions used to last sort the table. Read-only.
     */
    fields?: WorkbookSortField[];
    /**
     * Represents whether the casing impacted the last sort of the table. Read-only.
     */
    matchCase?: boolean;
    /**
     * Represents Chinese character ordering method last used to sort the table. The possible values are: PinYin, StrokeCount. Read-only.
     */
    method?: string;
}
export interface WorkbookWorksheet extends Entity, Parsable {
    /**
     * Returns collection of charts that are part of the worksheet. Read-only.
     */
    charts?: WorkbookChart[];
    /**
     * The display name of the worksheet.
     */
    name?: string;
    /**
     * Returns collection of names that are associated with the worksheet. Read-only.
     */
    names?: WorkbookNamedItem[];
    /**
     * Collection of PivotTables that are part of the worksheet.
     */
    pivotTables?: WorkbookPivotTable[];
    /**
     * The zero-based position of the worksheet within the workbook.
     */
    position?: number;
    /**
     * Returns sheet protection object for a worksheet. Read-only.
     */
    protection?: WorkbookWorksheetProtection;
    /**
     * Collection of tables that are part of the worksheet. Read-only.
     */
    tables?: WorkbookTable[];
    /**
     * The Visibility of the worksheet. The possible values are: Visible, Hidden, VeryHidden.
     */
    visibility?: string;
}
export interface WorkbookWorksheetCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkbookWorksheet[];
}
export interface WorkbookWorksheetProtection extends Entity, Parsable {
    /**
     * Sheet protection options. Read-only.
     */
    options?: WorkbookWorksheetProtectionOptions;
    /**
     * Indicates if the worksheet is protected.  Read-only.
     */
    protected?: boolean;
}
export interface WorkbookWorksheetProtectionOptions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents the worksheet protection option of allowing using auto filter feature.
     */
    allowAutoFilter?: boolean;
    /**
     * Represents the worksheet protection option of allowing deleting columns.
     */
    allowDeleteColumns?: boolean;
    /**
     * Represents the worksheet protection option of allowing deleting rows.
     */
    allowDeleteRows?: boolean;
    /**
     * Represents the worksheet protection option of allowing formatting cells.
     */
    allowFormatCells?: boolean;
    /**
     * Represents the worksheet protection option of allowing formatting columns.
     */
    allowFormatColumns?: boolean;
    /**
     * Represents the worksheet protection option of allowing formatting rows.
     */
    allowFormatRows?: boolean;
    /**
     * Represents the worksheet protection option of allowing inserting columns.
     */
    allowInsertColumns?: boolean;
    /**
     * Represents the worksheet protection option of allowing inserting hyperlinks.
     */
    allowInsertHyperlinks?: boolean;
    /**
     * Represents the worksheet protection option of allowing inserting rows.
     */
    allowInsertRows?: boolean;
    /**
     * Represents the worksheet protection option of allowing using pivot table feature.
     */
    allowPivotTables?: boolean;
    /**
     * Represents the worksheet protection option of allowing using sort feature.
     */
    allowSort?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export const WorkbookOperationStatusObject = {
    NotStarted: "notStarted",
    Running: "running",
    Succeeded: "succeeded",
    Failed: "failed",
} as const;
/* tslint:enable */
/* eslint-enable */
